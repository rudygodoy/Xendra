package org.compiere.model.function;


import org.xendra.annotations.*;
import org.apache.commons.lang.text.StrBuilder;
public class Costaveragemonth0 
{
 
@XendraFunction(Name="costaveragemonth",Output="integer",Owner="xendra",Language="plpgsql",
Identifier="0f540aca-9ea8-76d2-2869-4d99deb3c667",
Arguments="client_id numeric, product_id numeric, costelement_id numeric, p_period_id numeric",
Extension="",Synchronized="2017-12-23 09:35:22.0")
	public static final String Identifier = "0f540aca-9ea8-76d2-2869-4d99deb3c667";

	public static final String getCode() 
{
 	StrBuilder sb = new StrBuilder();
 	sb.appendln("DECLARE ");
	sb.appendln("_count			INTEGER := 0;");
	sb.appendln("costcalc_id 		INTEGER := 0;");
	sb.appendln("_counter 		NUMERIC := 0;");
	sb.appendln("_IsInput 		BOOLEAN := false;");
	sb.appendln("_IsTransfer 		BOOLEAN := false;");
	sb.appendln("_IsInventory		BOOLEAN := false;");
	sb.appendln("_IsInvoice		BOOLEAN := false;");
	sb.appendln("_IsReturn   		BOOLEAN := false;");
	sb.appendln("_hasOrder 		BOOLEAN := false;");
	sb.appendln("_isProduction 		BOOLEAN := false;");
	sb.appendln("_deferCreate 		BOOLEAN	:= false;");
	sb.appendln("_checkStock		BOOLEAN := false;");
	sb.appendln("_abort			BOOLEAN	:= false;");
	sb.appendln("_SumStock		NUMERIC := 0;");
	sb.appendln("_SumPrevStock		NUMERIC := 0;");
	sb.appendln("PERIOD			xendra.c_period%ROWTYPE;");
	sb.appendln("PREVPERIOD		xendra.c_period%ROWTYPE;");
	sb.appendln("CARDING			RECORD;");
	sb.appendln("PRODUCTION 		RECORD;");
	sb.appendln("PRODUCT_COSTING 	xendra.m_product_costing%ROWTYPE;");
	sb.appendln("_oldstock 		NUMERIC := 0;");
	sb.appendln("_oldcost 		NUMERIC := 0;");
	sb.appendln("_oldincost 		NUMERIC := 0;");
	sb.appendln("_newcost 		NUMERIC := 0;");
	sb.appendln("_newstock 		NUMERIC := 0;");
	sb.appendln("_newamount 		NUMERIC := 0;");
	sb.appendln("_newPrice 		NUMERIC := 0;");
	sb.appendln("CARDINGCALC 		xendra.m_carding%ROWTYPE;");
	sb.appendln("COSTCALC 		xendra.m_costcalc%ROWTYPE;");
	sb.appendln("_tablename 		CHARACTER VARYING := '';");
	sb.appendln("_sqlupdate 		CHARACTER VARYING := '';");
	sb.appendln("_found   		NUMERIC := 0;");
	sb.appendln("COSTELEMENT 		xendra.m_costelement%ROWTYPE;");
	sb.appendln("_priceactual		NUMERIC := 0;");
	sb.appendln("_c_currency_id		NUMERIC := 0;");
	sb.appendln("_c_conversiontype_id	NUMERIC := 0;");
	sb.appendln("_c_tax_id		NUMERIC	:= 0;");
	sb.appendln("_istaxincluded		BOOLEAN := false;");
	sb.appendln("_pricelastpo		NUMERIC := 0;");
	sb.appendln("_pricelastinv		NUMERIC := 0;");
	sb.appendln("_totalinvqty		NUMERIC := 0;");
	sb.appendln("_totalinvamt		NUMERIC := 0;");
	sb.appendln("_rate			NUMERIC := 0;");
	sb.appendln("_threshold		NUMERIC := 0;");
	sb.appendln("_processed 		NUMERIC[];");
	sb.appendln("_policystartdate	TIMESTAMP;");
	sb.appendln("_docbasetypeadjust 	TEXT;");
	sb.appendln("_movementadjustid	NUMERIC := 0;");
	sb.appendln("_movementadjustlineid	NUMERIC := 0;");
	sb.appendln("_doctypeadjust		NUMERIC := 0;");
	sb.appendln("MOVEMENTADJUST 		xendra.m_movement%ROWTYPE;");
	sb.appendln("MOVEMENTADJUSTLINE	xendra.m_movementline%ROWTYPE;");
	sb.appendln("BEGIN	");
	sb.appendln("  -- existe el cliente ?");
	sb.appendln("  SELECT COUNT(*) into _found FROM xendra.AD_Client ");
	sb.appendln("	WHERE AD_Client_ID = Client_ID;		");
	sb.appendln("  if _found = 0 then ");
	sb.appendln("	return -1;");
	sb.appendln("  end if;");
	sb.appendln("  SELECT startdate into _policystartdate from m_materialpolicy where ad_client_id = client_id OR ad_client_id = 0;");
	sb.appendln("  GET DIAGNOSTICS _found = ROW_COUNT;	");
	sb.appendln("  if _found = 0 then");
	sb.appendln("	return -2;");
	sb.appendln("  end if;");
	sb.appendln("  SELECT * into COSTELEMENT from xendra.M_COSTELEMENT ");
	sb.appendln("		  WHERE m_costelement_id = costelement_id;");
	sb.appendln("  SELECT * into PERIOD from c_period WHERE C_Period_id = p_period_id;");
	sb.appendln("  SELECT * into PREVPERIOD from c_period  ");
	sb.appendln("		  WHERE enddate = (SELECT startdate-1 FROM C_PERIOD WHERE C_PERIOD_ID = p_period_id)");
	sb.appendln("		  AND AD_Client_ID = client_id;		");
	sb.appendln("	  -- primero buscamos si ya se costeo este periodo.");
	sb.appendln("  SELECT * into PRODUCT_COSTING from xendra.m_product_costing ");
	sb.appendln("		WHERE m_product_id = product_id ");
	sb.appendln("		AND m_costelement_id = costelement_id ");
	sb.appendln("		AND ad_client_id = client_id");
	sb.appendln("		AND C_PERIOD_ID = p_period_id;");
	sb.appendln(" 	  GET DIAGNOSTICS _found = ROW_COUNT;	");
	sb.appendln("	  if _found = 0 then");
	sb.appendln("	    IF COALESCE(PREVPERIOD.C_PERIOD_ID,0) != 0 THEN");
	sb.appendln("		  select * into PRODUCT_COSTING from xendra.m_product_costing ");
	sb.appendln("		  	  WHERE m_product_id = product_id ");
	sb.appendln("			  AND m_costelement_id = costelement_id ");
	sb.appendln("			  AND ad_client_id = client_id");
	sb.appendln("			  AND C_PERIOD_ID = PREVPERIOD.C_Period_ID;");
	sb.appendln("		  -- solo si existe periodo anterior crear product_costing, porque puede que");
	sb.appendln("		  -- periodo anterior no exista");
	sb.appendln("		  if PRODUCT_COSTING.m_product_id isnull then 							");
	sb.appendln("		  -- obligatorios");
	sb.appendln("			  PRODUCT_COSTING.AD_Client_ID 		:= Client_ID;");
	sb.appendln("			  PRODUCT_COSTING.AD_ORG_ID		:= 0;");
	sb.appendln("			  PRODUCT_COSTING.CREATED 		:= current_timestamp;			");
	sb.appendln("			  PRODUCT_COSTING.CREATEDBY 		:= 100;");
	sb.appendln("			  PRODUCT_COSTING.UPDATED 		:= current_timestamp;");
	sb.appendln("			  PRODUCT_COSTING.UPDATEDBY 		:= 100;");
	sb.appendln("			  PRODUCT_COSTING.IsActive		:= 'Y';");
	sb.appendln("			  --			");
	sb.appendln("			  PRODUCT_COSTING.currentcostprice 	:= 0;");
	sb.appendln("			  PRODUCT_COSTING.futurecostprice 	:= 0;");
	sb.appendln("			  PRODUCT_COSTING.coststandard 		:= 0;");
	sb.appendln("			  PRODUCT_COSTING.coststandardpoqty 	:= 0;");
	sb.appendln("			  PRODUCT_COSTING.coststandardpoamt 	:= 0;");
	sb.appendln("			  PRODUCT_COSTING.coststandardcumqty 	:= 0;");
	sb.appendln("			  PRODUCT_COSTING.coststandardcumamt 	:= 0;");
	sb.appendln("			  PRODUCT_COSTING.costaverage 		:= 0;");
	sb.appendln("			  PRODUCT_COSTING.costaveragecumqty 	:= 0;");
	sb.appendln("			  PRODUCT_COSTING.costaveragecumamt 	:= 0;");
	sb.appendln("			  PRODUCT_COSTING.pricelastpo 		:= 0;");
	sb.appendln("			  PRODUCT_COSTING.pricelastinv 		:= 0;");
	sb.appendln("			  PRODUCT_COSTING.totalinvqty 		:= 0;");
	sb.appendln("			  PRODUCT_COSTING.totalinvamt 		:= 0;");
	sb.appendln("		  --");
	sb.appendln("			  PRODUCT_COSTING.M_CostElement_ID 	:= costelement_id;			");
	sb.appendln("			  PRODUCT_COSTING.M_Product_ID 		:= product_id; ");
	sb.appendln("			  PRODUCT_COSTING.lastcosted 		:= current_timestamp;");
	sb.appendln("			  PRODUCT_COSTING.c_period_id 		:= PREVPERIOD.C_Period_ID;			");
	sb.appendln("			  PRODUCT_COSTING.seqno 		:= 1;");
	sb.appendln("		  else	");
	sb.appendln("			  IF COALESCE(PRODUCT_COSTING.M_CostCalc_ID,0) = 0 THEN		  ");
	sb.appendln("			    PRODUCT_COSTING.errormsg = COALESCE(PRODUCT_COSTING.errormsg,'') || 'no existe CostCalc_ID de referencia ';");
	sb.appendln("			  END IF;				");
	sb.appendln("			  IF COALESCE(PRODUCT_COSTING.errormsg,'') != '' THEN");
	sb.appendln("			    UPDATE m_product_costing set errormsg = PRODUCT_COSTING.errormsg,");
	sb.appendln("						costaverage 	= PRODUCT_COSTING.costaverage, ");
	sb.appendln("					    costaveragecumqty 	= PRODUCT_COSTING.costaveragecumqty,");
	sb.appendln("					    currentcostprice 	= PRODUCT_COSTING.currentcostprice");
	sb.appendln("				WHERE AD_Client_ID = PRODUCT_COSTING.AD_Client_ID");
	sb.appendln("				AND m_product_ID = product_id");
	sb.appendln("				AND C_Period_ID = p_period_id;");
	sb.appendln("				GET DIAGNOSTICS _found = ROW_COUNT;	 																												");
	sb.appendln("				IF _found = 0 THEN");
	sb.appendln("				  PRODUCT_COSTING.c_period_id = p_period_id;");
	sb.appendln("				  INSERT INTO M_Product_Costing (AD_Client_ID, AD_Org_ID,created, createdby,updated, updatedby, ");
	sb.appendln("				  costaverage, costaveragecumamt,costaveragecumqty, c_period_id,  currentcostprice, ");
	sb.appendln("				  isactive, lastcosted, m_costcalc_id, m_costelement_id, m_product_id, ");
	sb.appendln("				  pricelastinv, pricelastpo, totalinvamt,totalinvqty,seqno) ");
	sb.appendln("				  VALUES (");
	sb.appendln("				  PRODUCT_COSTING.AD_Client_ID, PRODUCT_COSTING.AD_Org_ID, PRODUCT_COSTING.Created,PRODUCT_COSTING.CreatedBy,  PRODUCT_COSTING.Updated,PRODUCT_COSTING.UpdatedBy,  ");
	sb.appendln("				  PRODUCT_COSTING.costaverage, PRODUCT_COSTING.costaveragecumamt,PRODUCT_COSTING.costaveragecumqty, PRODUCT_COSTING.c_period_id, PRODUCT_COSTING.currentcostprice, ");
	sb.appendln("				  PRODUCT_COSTING.isactive, PRODUCT_COSTING.lastcosted, PRODUCT_COSTING.m_costcalc_id, PRODUCT_COSTING.m_costelement_id, PRODUCT_COSTING.m_product_id, ");
	sb.appendln("				  PRODUCT_COSTING.pricelastinv, PRODUCT_COSTING.pricelastpo, PRODUCT_COSTING.totalinvamt,PRODUCT_COSTING.totalinvqty,PRODUCT_COSTING.seqno + 1);				  				  ");
	sb.appendln("				END IF;		  ");
	sb.appendln("			  RETURN -3;");
	sb.appendln("		  END IF;	  ");
	sb.appendln("		SELECT * INTO COSTCALC From xendra.M_CostCalc ");
	sb.appendln("			WHERE m_CostCalc_ID = PRODUCT_COSTING.M_CostCalc_ID;");
	sb.appendln("	    end if;	");
	sb.appendln("	  end if;");
	sb.appendln("	  else");
	sb.appendln("	    IF COALESCE(PRODUCT_COSTING.errormsg,'') != '' THEN");
	sb.appendln("	      RETURN -4;");
	sb.appendln("	    ELSE");
	sb.appendln("	      SELECT * INTO COSTCALC From xendra.M_CostCalc ");
	sb.appendln("	      WHERE m_CostCalc_ID = PRODUCT_COSTING.M_CostCalc_ID;");
	sb.appendln("	    END IF;");
	sb.appendln("	  end if;");
	sb.appendln("	  if COALESCE(PREVPERIOD.C_PERIOD_ID,0) != 0 THEN");
	sb.appendln("	     SELECT costaveragecumqty INTO _SumPrevStock from xendra.m_product_costing ");
	sb.appendln("		  	  WHERE m_product_id = product_id ");
	sb.appendln("			  AND m_costelement_id = costelement_id ");
	sb.appendln("			  AND ad_client_id = client_id");
	sb.appendln("			  AND C_PERIOD_ID = PREVPERIOD.C_Period_ID;");
	sb.appendln("	  END IF;");
	sb.appendln("	  _SumPrevStock := COALESCE(_SumPrevStock,0);");
	sb.appendln("	  _oldstock  := COALESCE(PRODUCT_COSTING.costaveragecumqty,0);");
	sb.appendln("	  _oldcost   := COALESCE(PRODUCT_COSTING.costaverage,0);");
	sb.appendln("	  _oldincost := COALESCE(PRODUCT_COSTING.currentcostprice,0);	  	  	");
	sb.appendln("	  SELECT COUNT(*) into _found FROM xendra.M_TRANSACTION t ");
	sb.appendln("				WHERE t.M_Product_ID = product_ID ");
	sb.appendln("				 AND t.AD_Client_ID = Client_ID");
	sb.appendln("				 AND t.C_Period_ID = p_period_id");
	sb.appendln("				 AND seqno isnull");
	sb.appendln("				 AND t.processed = 'N';");
	sb.appendln("	  if _found > 0 then ");
	sb.appendln("	     SELECT count(*) into _found FROM (");
	sb.appendln("	       SELECT CASE WHEN ad_table_id = 318 then (select dateinvoiced from c_invoice where c_invoice_id = record_id) ");
	sb.appendln("	        WHEN ad_table_id = 319 then (select movementdate from m_inout where m_inout_id = record_id) ");
	sb.appendln("	        WHEN ad_table_id = 321 then (select movementdate from m_inventory where m_inventory_id = record_id)");
	sb.appendln("	        WHEN ad_table_id = 323 then (select movementdate from m_movement where m_movement_id = record_id)");
	sb.appendln("	        WHEN ad_table_id = 325 then (select movementdate from m_production where m_production_id = record_id) end AS currentdate, movementdate");
	sb.appendln("	        FROM M_TRANSACTION t WHERE M_PRODUCT_ID = product_ID");
	sb.appendln("			AND t.AD_Client_ID = Client_ID");
	sb.appendln("			AND t.C_Period_ID = p_period_id) as datediffs where currentdate != movementdate;");
	sb.appendln("	     IF _found > 0 THEN");
	sb.appendln("		  with upmovementdate as (");
	sb.appendln("		  SELECT m_transaction_id,");
	sb.appendln("		  CASE WHEN ad_table_id = 318 then (select dateinvoiced from c_invoice where c_invoice_id = record_id) ");
	sb.appendln("			 WHEN ad_table_id = 319 then (select movementdate from m_inout where m_inout_id = record_id) ");
	sb.appendln("			 WHEN ad_table_id = 321 then (select movementdate from m_inventory where m_inventory_id = record_id)");
	sb.appendln("			 WHEN ad_table_id = 323 then (select movementdate from m_movement where m_movement_id = record_id)");
	sb.appendln("			 WHEN ad_table_id = 325 then (select movementdate from m_production where m_production_id = record_id) end AS currentdate");
	sb.appendln("		  FROM M_TRANSACTION t 		  ");
	sb.appendln("		  WHERE M_PRODUCT_ID = product_ID");
	sb.appendln("			AND t.AD_Client_ID = Client_ID");
	sb.appendln("			AND t.C_Period_ID = p_period_id)");
	sb.appendln("		  UPDATE m_transaction set movementdate = upmovementdate.currentdate, c_period_id = p.c_period_id  ");
	sb.appendln("			FROM upmovementdate");
	sb.appendln("			JOIN C_PERIOD p on upmovementdate.currentdate::date BETWEEN p.startdate AND p.enddate");
	sb.appendln("			WHERE upmovementdate.m_transaction_id = m_transaction.m_transaction_id;		    	");
	sb.appendln("	     END IF;");
	sb.appendln("	     WITH upseqno as (select row_number() over (order by movementdate,line) as seqno, ");
	sb.appendln("		m_transaction_id from m_transaction where m_product_id = product_ID AND c_period_id = p_period_id)");
	sb.appendln("	     update m_transaction set seqno = upseqno.seqno from upseqno ");
	sb.appendln("	     WHERE upseqno.m_transaction_id = m_transaction.m_transaction_id;			");
	sb.appendln("	  end if;	  	  	  ");
	sb.appendln("	  FOR CARDING IN SELECT *,");
	sb.appendln("		    (SELECT TABLENAME FROM AD_TABLE WHERE AD_TABLE_ID = t.AD_TABLE_ID) as tablename,	");
	sb.appendln("		    CASE WHEN ad_table_id = 318 then (select documentno from c_invoice where c_invoice_id = record_id)");
	sb.appendln("			 WHEN ad_table_id = 319 then (select documentno from m_inout where m_inout_id = record_id)");
	sb.appendln("			 WHEN ad_table_id = 321 then (select documentno from m_inventory where m_inventory_id = record_id)");
	sb.appendln("			 WHEN ad_table_id = 323 then (select documentno from m_movement where m_movement_id = record_id)");
	sb.appendln("			 WHEN ad_table_id = 325 then (select documentno from m_production where m_production_id = record_id)");
	sb.appendln("		    END as documentno,");
	sb.appendln("		    CASE WHEN ad_table_id = 318 then (select docstatus from c_invoice where c_invoice_id = record_id) ");
	sb.appendln("			 WHEN ad_table_id = 319 then (select docstatus from m_inout where m_inout_id = record_id) ");
	sb.appendln("			 WHEN ad_table_id = 321 then (select docstatus from m_inventory where m_inventory_id = record_id)");
	sb.appendln("			 WHEN ad_table_id = 323 then (select docstatus from m_movement where m_movement_id = record_id)");
	sb.appendln("			 WHEN ad_table_id = 325 then (select docstatus from m_production where m_production_id = record_id)			 ");
	sb.appendln("		    END as currentdocstatus");
	sb.appendln("			FROM M_TRANSACTION t ");
	sb.appendln("			 WHERE t.M_Product_ID = product_ID ");
	sb.appendln("			 AND t.AD_Client_ID = Client_ID");
	sb.appendln("			 AND t.C_Period_ID = p_period_id");
	sb.appendln("			 AND t.processed = 'N'");
	sb.appendln("			 ORDER BY SEQNO");
	sb.appendln("	  LOOP	    	    	    ");
	sb.appendln("	    RAISE NOTICE 'CURRENTDOCSTATUS % , DOCSTATUS %',CARDING.CURRENTDOCSTATUS,CARDING.DOCSTATUS;");
	sb.appendln("	    IF CARDING.DOCSTATUS != CARDING.CURRENTDOCSTATUS THEN");
	sb.appendln("		UPDATE M_TRANSACTION SET DOCSTATUS = CARDING.CURRENTDOCSTATUS WHERE M_TRANSACTION_ID = CARDING.M_TRANSACTION_ID;");
	sb.appendln("		CARDING.DOCSTATUS = CARDING.CURRENTDOCSTATUS;");
	sb.appendln("		_checkStock := true;");
	sb.appendln("	    END IF;");
	sb.appendln("	    IF CARDING.docstatus NOT in ('CO','CL') THEN		");
	sb.appendln("		UPDATE M_TRANSACTION SET PROCESSED = 'Y' WHERE M_Transaction_ID = CARDING.M_TRANSACTION_ID;");
	sb.appendln("		CONTINUE;");
	sb.appendln("	    END IF;");
	sb.appendln("	    IF  Substring(CARDING.Movementtype,1,1) = 'M'  THEN ");
	sb.appendln("	      _IsTransfer := true;");
	sb.appendln("	    ELSE");
	sb.appendln("	      _IsTransfer := false;");
	sb.appendln("	    END IF;");
	sb.appendln("	    IF _IsTransfer THEN		");
	sb.appendln("		UPDATE M_TRANSACTION SET PROCESSED = 'Y' WHERE M_Transaction_ID = CARDING.M_TRANSACTION_ID;");
	sb.appendln("		CONTINUE;");
	sb.appendln("	    END IF;");
	sb.appendln("	    IF CARDING.TRANSACTIONTYPE != 'C' AND CARDING.MovementQty = 0 THEN");
	sb.appendln("		UPDATE M_TRANSACTION SET PROCESSED = 'Y' WHERE M_Transaction_ID = CARDING.M_TRANSACTION_ID;");
	sb.appendln("		CONTINUE;");
	sb.appendln("	    END IF;");
	sb.appendln("	    IF COALESCE(CARDING.C_InvoiceLine_ID,0) > 0 THEN");
	sb.appendln("	      _IsInvoice := true;");
	sb.appendln("	    ELSE");
	sb.appendln("	      _IsInvoice := false;");
	sb.appendln("	    END IF;");
	sb.appendln("	    IF  Substring(CARDING.Movementtype,2,1) = '+' OR _IsInvoice THEN");
	sb.appendln("	      _IsInput := true;");
	sb.appendln("	    ELSE");
	sb.appendln("	      _IsInput := false;");
	sb.appendln("	    END IF;		");
	sb.appendln("	    IF COALESCE(CARDING.M_ProductionLine_ID,0) > 0 THEN");
	sb.appendln("	      _isProduction := true;");
	sb.appendln("	    ELSE");
	sb.appendln("	      _isProduction := false;");
	sb.appendln("	    END IF;");
	sb.appendln("	    IF COALESCE(CARDING.M_InventoryLine_ID,0) > 0 THEN");
	sb.appendln("	      _IsInventory := true;");
	sb.appendln("	    ELSE");
	sb.appendln("	      _IsInventory := false;");
	sb.appendln("	    END IF;");
	sb.appendln("	    IF COALESCE(CARDING.C_OrderLine_ID,0) > 0 THEN");
	sb.appendln("	      _hasOrder := true;");
	sb.appendln("	    ELSE");
	sb.appendln("	      _hasOrder := false;");
	sb.appendln("	    END IF;");
	sb.appendln("	    IF CARDING.Movementtype = 'R+' THEN");
	sb.appendln("	      _IsReturn := true;");
	sb.appendln("	    ELSE");
	sb.appendln("	      _IsReturn := false;");
	sb.appendln("	    END IF; ");
	sb.appendln("	    --");
	sb.appendln("	    if (COSTCALC.m_COSTCALC_id ISNULL AND NOT _IsInput) OR _IsTransfer then");
	sb.appendln("	      _defercreate := true;");
	sb.appendln("	    else");
	sb.appendln("	      _defercreate := false;");
	sb.appendln("	    end if;");
	sb.appendln("	    BEGIN");
	sb.appendln("	      if _IsInput then");
	sb.appendln("		if not _deferCreate then ");
	sb.appendln("		  SELECT * INTO COSTCALC From xendra.M_CostCalc ");
	sb.appendln("		  WHERE AD_Table_ID = CARDING.AD_Table_ID AND");
	sb.appendln("			Record_ID = CARDING.Record_ID AND");
	sb.appendln("			Line = CARDING.Line AND ");
	sb.appendln("			M_Product_ID = CARDING.M_PRODUCT_ID; ");
	sb.appendln("		  IF COSTCALC isnull THEN");
	sb.appendln("		    COSTCALC.AD_Client_ID 	:= Client_ID;");
	sb.appendln("		    COSTCALC.C_Period_ID	:= CARDING.C_PERIOD_ID;");
	sb.appendln("		    COSTCALC.AD_ORG_ID		:= 0;");
	sb.appendln("		    COSTCALC.CREATED 		:= current_timestamp;");
	sb.appendln("		    COSTCALC.CREATEDBY 		:= CARDING.CREATEDBY;");
	sb.appendln("		    COSTCALC.UPDATED 		:= current_timestamp;");
	sb.appendln("		    COSTCALC.UPDATEDBY 		:= CARDING.UPDATEDBY;			");
	sb.appendln("		    COSTCALC.Stock 	 	:= _oldstock;");
	sb.appendln("		    COSTCALC.Cost   	 	:= _oldcost;");
	sb.appendln("		    COSTCALC.InCost	 	:= _oldInCost;");
	sb.appendln("		    COSTCALC.M_Product_ID 	:= product_id; ");
	sb.appendln("		    COSTCALC.M_CostElement_ID 	:= costelement_id;");
	sb.appendln("		    COSTCALC.IsActive		:= 'Y';");
	sb.appendln("		    COSTCALC.IsCostedOk		:= 'Y';						");
	sb.appendln("		    COSTCALC.AD_Table_ID  	:= CARDING.AD_Table_ID;");
	sb.appendln("		    COSTCALC.Record_ID 	 	:= CARDING.Record_ID;	");
	sb.appendln("		    COSTCALC.Line		:= CARDING.Line;");
	sb.appendln("		  ELSE");
	sb.appendln("		    COSTCALC.UPDATED 		:= current_timestamp;");
	sb.appendln("		    COSTCALC.UPDATEDBY 		:= CARDING.UPDATEDBY;			");
	sb.appendln("		  END IF;");
	sb.appendln("	        END IF;");
	sb.appendln("	        _deferCreate := false;");
	sb.appendln("	      END IF;");
	sb.appendln("	      IF _IsInput AND NOT _IsTransfer THEN ");
	sb.appendln("	        IF _hasOrder OR _isProduction OR _IsInventory OR _IsInvoice THEN");
	sb.appendln("	          if Substring(CARDING.Movementtype,2,1) = '+' then");
	sb.appendln("		    _newStock := _oldStock + CARDING.MovementQty;");
	sb.appendln("		  else");
	sb.appendln("		    _newStock := _oldStock;");
	sb.appendln("		  end if;");
	sb.appendln("		  IF _IsReturn then");
	sb.appendln("		    _newCost := xendra.getaveragecost(CARDING.AD_Client_ID,								     ");
	sb.appendln("						      costelement_id,");
	sb.appendln("						      CARDING.M_Product_ID,");
	sb.appendln("						      CARDING.movementdate, false); ");
	sb.appendln("		    PRODUCT_COSTING.currentcostprice := _newCost;");
	sb.appendln("		    if _oldcost = 0 then				    ");
	sb.appendln("		      PRODUCT_COSTING.currentcostprice := _newCost;");
	sb.appendln("				    _oldcost := PRODUCT_COSTING.currentcostprice;");
	sb.appendln("		    end if;");
	sb.appendln("		   ELSE -- si no es retorno");
	sb.appendln("		     IF _IsProduction THEN");
	sb.appendln("		       IF CARDING.TRANSACTIONTYPE = 'B' OR CARDING.TRANSACTIONTYPE = 'C' THEN");
	sb.appendln("		         _newPrice := 0;");
	sb.appendln("		         RAISE NOTICE 'ProductionPlanID %',CARDING.M_ProductionPlan_ID;");
	sb.appendln("		         FOR PRODUCTION IN SELECT M_Product_ID, MovementQty ");
	sb.appendln("					  FROM xendra.M_Transaction");
	sb.appendln("					  WHERE M_ProductionPlan_ID = CARDING.M_ProductionPlan_ID");
	sb.appendln("						AND MovementType = 'P-'");
	sb.appendln("		         LOOP ");
	sb.appendln("			   RAISE NOTICE '%',CARDING.movementdate;");
	sb.appendln("			   _newCost := xendra.getaveragecost(CLIENT_ID,								     ");
	sb.appendln("				costelement_id,");
	sb.appendln("				PRODUCTION.M_Product_ID,	");
	sb.appendln("				CARDING.movementdate, true); 					");
	sb.appendln("			   if _newCost = 0 then			   ");
	sb.appendln("			     COSTCALC.ERRORMSG := COSTCALC.ERRORMSG || getcostmsg(CLIENT_ID, ");
	sb.appendln("				costelement_id,");
	sb.appendln("				PRODUCTION.M_Product_ID,");
	sb.appendln("				CARDING.movementdate, true);");
	sb.appendln("			   end if;");
	sb.appendln("			   if sign(_newCost) = -1 then");
	sb.appendln("			     -- retornamos un -2 que le dice, anda al ultimo por si acaso y vuelve a procesar");
	sb.appendln("			     --UPDATE M_TRANSACTION SET PROCESSED = 'N' WHERE M_Transaction_ID = ANY (_processed); ");
	sb.appendln("			     --GET DIAGNOSTICS _found = ROW_COUNT;	 																												");
	sb.appendln("			     --RAISE NOTICE '%', _found;");
	sb.appendln("			     _abort := TRUE;");
	sb.appendln("			     RAISE EXCEPTION 'Productos con costo 0 cancela hasta la siguiente ejecucion' USING HINT = 'falta costear productos en produccion';			     ");
	sb.appendln("			     RETURN -2;");
	sb.appendln("			   else");
	sb.appendln("			     _newPrice := _newPrice + _newCost * abs( PRODUCTION.MovementQty ) ;");
	sb.appendln("			   end if;			     ");
	sb.appendln("			 END LOOP;");
	sb.appendln("		         IF _newPrice > 0 then");
	sb.appendln("		           IF CARDING.MovementQty > 0 THEN");
	sb.appendln("		             _newPrice := _newPrice / carding.MovementQty;");
	sb.appendln("		           END IF;");
	sb.appendln("			   COSTCALC.InCost := _newPrice;");
	sb.appendln("			 END IF;");
	sb.appendln("		       END IF;");
	sb.appendln("		     ELSE");
	sb.appendln("			IF COALESCE(CARDING.C_InvoiceLine_ID,0) > 0 THEN			");
	sb.appendln("		         IF CARDING.TRANSACTIONTYPE = 'C' THEN");
	sb.appendln("				_priceactual := getpriceactualfrominvoiceline(CARDING.AD_Client_ID,");
	sb.appendln("					CARDING.AD_ORG_ID,CARDING.C_InvoiceLine_ID,");
	sb.appendln("					COSTELEMENT.c_currency_id,CARDING.movementdate);");
	sb.appendln("				if COSTCALC.InCost > 0 then ");
	sb.appendln("				  _threshold := ROUND( 100.0 * ( _priceactual / COSTCALC.InCost), 1);");
	sb.appendln("				elsif COSTCALC.Cost > 0 then ");
	sb.appendln("				  _threshold := ROUND( 100.0 * ( _priceactual / COSTCALC.Cost), 1);");
	sb.appendln("				else");
	sb.appendln("				  _threshold := 100;");
	sb.appendln("				end if;");
	sb.appendln("				_threshold := abs(_threshold);");
	sb.appendln("				RAISE NOTICE '%',_threshold;");
	sb.appendln("				if _threshold <= 50 then ");
	sb.appendln("				  IF COSTCALC.Incost - _priceactual > 0 THEN ");
	sb.appendln("					COSTCALC.Incost := COSTCALC.Incost - _priceactual;");
	sb.appendln("				  ELSE");
	sb.appendln("					COSTCALC.Incost := 0;");
	sb.appendln("				  END IF;  ");
	sb.appendln("				else");
	sb.appendln("				  _priceactual := getlinenetamtfrominvoiceline(CARDING.AD_Client_ID,");
	sb.appendln("					CARDING.AD_ORG_ID,CARDING.C_InvoiceLine_ID,");
	sb.appendln("					COSTELEMENT.c_currency_id,CARDING.movementdate);");
	sb.appendln("				  _newAmount := _oldStock * _oldCost; ");
	sb.appendln("				  _newAmount := _newAmount - _priceactual;");
	sb.appendln("				  if _oldStock > 0 then");
	sb.appendln("					_newAmount := _newAmount / _oldStock;");
	sb.appendln("				  else");
	sb.appendln("					_newAmount := 0;");
	sb.appendln("				  end if;");
	sb.appendln("				  if _newAmount >= 0 then ");
	sb.appendln("					COSTCALC.Incost := _newAmount;");
	sb.appendln("				  else");
	sb.appendln("					COSTCALC.Incost := 0;");
	sb.appendln("				  end if;");
	sb.appendln("				end if;");
	sb.appendln("		         END IF;		     ");
	sb.appendln("		       ELSIF COALESCE(CARDING.C_ORDERLINE_ID,0) > 0 THEN");
	sb.appendln("		         IF CARDING.TRANSACTIONTYPE = 'B' OR CARDING.TRANSACTIONTYPE = 'C' THEN");
	sb.appendln("			   select ol.priceactual,");
	sb.appendln("				  ol.c_currency_id,");
	sb.appendln("				  o.c_conversiontype_id,");
	sb.appendln("				  o.istaxincluded='Y',");
	sb.appendln("				  ol.c_tax_id ");
	sb.appendln("				  into _priceactual,_c_currency_id, _c_conversiontype_id,_istaxincluded,_c_tax_id");
	sb.appendln("				  FROM ");
	sb.appendln("				  c_orderline ol ");
	sb.appendln("				  join c_order o on ol.c_order_id = o.c_order_id");
	sb.appendln("				  WHERE ol.c_orderline_id = CARDING.C_OrderLine_ID;");
	sb.appendln("		           select max(rate) into _rate FROM c_tax ");
	sb.appendln("				  where c_taxcategory_id in");
	sb.appendln("				  (SELECT c_taxcategory_id from m_product where m_product_id =  product_id);");
	sb.appendln("			   raise notice 'priceactual % % % % % ',_priceactual,_c_currency_id,_c_conversiontype_id,_istaxincluded,_c_tax_id;");
	sb.appendln("			   IF _istaxincluded AND _rate > 0 AND _priceactual > 0 then");
	sb.appendln("			     SELECT rate into _rate FROM c_tax ");
	sb.appendln("			       where c_tax_id = _c_tax_id;");
	sb.appendln("			       GET DIAGNOSTICS _found = ROW_COUNT;	 																												");
	sb.appendln("			       IF _found = 1 THEN							   ");
	sb.appendln("			         _rate = _rate / 100;");
	sb.appendln("				 _rate = 1 + _rate;");
	sb.appendln("				 _priceactual := round(_priceactual / _rate,10);");
	sb.appendln("			       END IF;");
	sb.appendln("			   END IF;");
	sb.appendln("			   _priceactual = currencyconvertcost(_priceactual::numeric,_c_currency_id, COSTELEMENT.c_currency_id,");
	sb.appendln("			   CARDING.movementdate, _c_conversiontype_id::numeric, CARDING.AD_Client_ID, CARDING.AD_ORG_ID);");
	sb.appendln("			   _PriceActual := COALESCE(_PriceActual,0);	");
	sb.appendln("			   _pricelastpo := COALESCE(_PriceActual,0);");
	sb.appendln("			   if _pricelastpo = 0 then				");
	sb.appendln("				UPDATE M_TRANSACTION SET ERRORMSG = COALESCE(ERRORMSG,'') || 'problema de conversion' WHERE M_Transaction_ID = CARDING.M_TRANSACTION_ID;");
	sb.appendln("				COSTCALC.ERRORMSG := 'problema de conversion ' || date(CARDING.movementdate) || ' '|| COALESCE((select name from c_conversiontype where c_conversiontype_id = _c_conversiontype_id),'') ;				");
	sb.appendln("			   end if;");
	sb.appendln("			   COSTCALC.InCost := _pricelastpo;");
	sb.appendln("		         END IF;");
	sb.appendln("		       ELSIF COALESCE(CARDING.M_InventoryLine_ID,0) > 0 THEN");
	sb.appendln("		         IF CARDING.TRANSACTIONTYPE = 'B' OR CARDING.TRANSACTIONTYPE = 'C' THEN");
	sb.appendln("			   SELECT cost,CASE WHEN inventorytype='I' then qtycount else 0 end into _pricelastinv,_totalinvqty FROM m_inventoryline ");
	sb.appendln("				where m_inventoryline_id = CARDING.M_InventoryLine_ID;");
	sb.appendln("			   _priceactual = COALESCE(_PriceActual,0);	");
	sb.appendln("			   _pricelastinv := COALESCE(_pricelastinv,0);");
	sb.appendln("			   IF _pricelastinv = 0 then");
	sb.appendln("				_pricelastinv := getLastPricePO(_policystartdate,product_id);");
	sb.appendln("				IF (_pricelastinv > 0) then ");
	sb.appendln("				   UPDATE m_inventoryline set description = 'cost from last price po', cost = _pricelastinv ");
	sb.appendln("					where m_inventoryline_id = CARDING.M_InventoryLine_ID;				   ");
	sb.appendln("				END IF;				");
	sb.appendln("			   END IF;");
	sb.appendln("		 	   _totalinvamt	 := _pricelastinv * _totalinvqty;");
	sb.appendln("			   COSTCALC.InCost := _pricelastinv;");
	sb.appendln("			 END IF;");
	sb.appendln("		       END IF;");
	sb.appendln("		     END IF;");
	sb.appendln("		   END IF;");
	sb.appendln("		   -- calculamos el costo");
	sb.appendln("		   _newAmount := _oldStock * _oldCost; ");
	sb.appendln("		   IF CARDING.TRANSACTIONTYPE = 'B' THEN");
	sb.appendln("		     _newAmount := _newAmount + COALESCE(CARDING.MovementQty,0) * COALESCE(COSTCALC.InCost,0);");
	sb.appendln("		     if _oldStock >= 0 then");
	sb.appendln("		       _newCost := _newAmount / ( _oldStock + COALESCE(CARDING.MovementQty,0) );");
	sb.appendln("		     else");
	sb.appendln("		       _newCost := COSTCALC.InCost;");
	sb.appendln("		     end if;");
	sb.appendln("		   ELSIF CARDING.TRANSACTIONTYPE = 'C' THEN");
	sb.appendln("		     _newCost := COSTCALC.InCost;");
	sb.appendln("		   ELSE");
	sb.appendln("		     _newCost = _oldCost;  ");
	sb.appendln("		   END IF;");
	sb.appendln("		   COSTCALC.preCost := _oldCost;");
	sb.appendln("		   COSTCALC.preStock := _oldStock;");
	sb.appendln("		   COSTCALC.Stock := _newStock;		   ");
	sb.appendln("		   COSTCALC.Cost  := _newCost;				");
	sb.appendln("		 else");
	sb.appendln("		   COSTCALC.preCost := _oldCost;");
	sb.appendln("		   COSTCALC.preStock := _oldStock;	");
	sb.appendln("		   COSTCALC.Stock := _oldStock + COALESCE(CARDING.MovementQty,0);");
	sb.appendln("		   COSTCALC.InCost := _oldCost;		   ");
	sb.appendln("		 end if;");
	sb.appendln("		 COSTCALC.MovementDate := CARDING.MovementDate;");
	sb.appendln("	       else -- output");
	sb.appendln("	         -- en el caso de costeo no debe considerarse traslados entre almacen");
	sb.appendln("	         IF NOT _Istransfer then");
	sb.appendln("		   COSTCALC.Stock := _oldStock + COALESCE(CARDING.MovementQty,0); -- porque el campo esta en negativo.");
	sb.appendln("		 ELSE ");
	sb.appendln("		   COSTCALC.Stock := _oldStock;");
	sb.appendln("		 END IF;");
	sb.appendln("		 COSTCALC.OMovementDate := CARDING.MovementDate;");
	sb.appendln("	       end if;");
	sb.appendln("	       IF COSTCALC.Stock < 0 THEN		");
	sb.appendln("	          IF _doctypeadjust = 0 THEN");
	sb.appendln("		     select properties->'adjust' into _docbasetypeadjust ");
	sb.appendln("			from m_materialpolicy where ad_client_id = Client_ID;");
	sb.appendln("		     select c_doctype_id into _doctypeadjust from c_doctype ");
	sb.appendln("			where docbasetype = _docbasetypeadjust and ad_client_id = Client_ID;");
	sb.appendln("	          END IF; ");
	sb.appendln("	          IF _doctypeadjust > 0 THEN --AND _movementadjustid = 0 THEN");
	sb.appendln("		     SELECT m_movement.m_movement_id into _movementadjustid ");
	sb.appendln("			from m_movement");
	sb.appendln("			where c_doctype_id = _doctypeadjust AND");
	sb.appendln("			movementdate = PERIOD.startdate;	          ");
	sb.appendln("	          --END IF 		  		  		  ");
	sb.appendln("		  --IF _movementadjustid > 0 THEN");
	sb.appendln("		  --   IF COALESCE(_doctypeadjust,0) > 0 THEN");
	sb.appendln("			if COALESCE(_movementadjustid,0) = 0 THEN");
	sb.appendln("				MOVEMENTADJUST.M_MOVEMENT_ID 	:= nextval('m_movement_seq');");
	sb.appendln("				MOVEMENTADJUST.AD_Client_ID 	:= Client_ID;");
	sb.appendln("				--MOVEMENTADJUST.C_Period_ID	:= CARDING.C_PERIOD_ID;");
	sb.appendln("				MOVEMENTADJUST.AD_ORG_ID	:= 0;");
	sb.appendln("				MOVEMENTADJUST.CREATED 		:= current_timestamp;");
	sb.appendln("				MOVEMENTADJUST.CREATEDBY 	:= CARDING.CREATEDBY;");
	sb.appendln("				MOVEMENTADJUST.UPDATED 		:= current_timestamp;");
	sb.appendln("				MOVEMENTADJUST.UPDATEDBY 	:= CARDING.UPDATEDBY;			");
	sb.appendln("				MOVEMENTADJUST.IsActive		:= 'Y';");
	sb.appendln("				MOVEMENTADJUST.movementdate	:= PERIOD.startdate;				");
	sb.appendln("				MOVEMENTADJUST.DOCUMENTNO	:= 'ADJUST'||' '||PERIOD.NAME;");
	sb.appendln("				MOVEMENTADJUST.DOCACTION	:= 'DR';");
	sb.appendln("				MOVEMENTADJUST.DOCSTATUS	:= 'VO';");
	sb.appendln("				MOVEMENTADJUST.C_DOCTYPE_ID	:= _doctypeadjust;					");
	sb.appendln("				MOVEMENTADJUST.IDENTIFIER 	:= getuuid();				");
	sb.appendln("				INSERT INTO xendra.m_movement (m_movement_id, ad_client_id, ad_org_id,");
	sb.appendln("					isactive, created, createdby, ");
	sb.appendln("					movementdate,dateacct, ");
	sb.appendln("					updated, updatedby, c_doctype_id, ");
	sb.appendln("					documentno, docaction, docstatus)");
	sb.appendln("				VALUES ( MOVEMENTADJUST.M_MOVEMENT_ID, MOVEMENTADJUST.AD_Client_ID, MOVEMENTADJUST.AD_ORG_ID,");
	sb.appendln("					 MOVEMENTADJUST.ISACTIVE, MOVEMENTADJUST.CREATED, MOVEMENTADJUST.CREATEDBY, ");
	sb.appendln("					 MOVEMENTADJUST.movementdate, MOVEMENTADJUST.movementdate,");
	sb.appendln("					 MOVEMENTADJUST.UPDATED, MOVEMENTADJUST.UPDATEDBY, MOVEMENTADJUST.C_DOCTYPE_ID, ");
	sb.appendln("					 MOVEMENTADJUST.DOCUMENTNO, MOVEMENTADJUST.DOCACTION, MOVEMENTADJUST.DOCSTATUS);			");
	sb.appendln("				_movementadjustid := MOVEMENTADJUST.M_MOVEMENT_ID;");
	sb.appendln("			END IF;");
	sb.appendln("		     --END IF; 	");
	sb.appendln("			SELECT m_movementline_id into _movementadjustlineid from m_movementline ml where ml.identifier = carding.identifier;");
	sb.appendln("			IF _movementadjustlineid ISNULL THEN");
	sb.appendln("			   _movementadjustlineid := nextval('m_movementline_seq');");
	sb.appendln("			   MOVEMENTADJUSTLINE.M_MOVEMENT_ID := _movementadjustid;");
	sb.appendln("			   MOVEMENTADJUSTLINE.M_MOVEMENTLINE_ID := _movementadjustlineid;");
	sb.appendln("			   MOVEMENTADJUSTLINE.AD_Client_ID 	:= Client_ID;");
	sb.appendln("			   MOVEMENTADJUSTLINE.AD_ORG_ID	:= 0;");
	sb.appendln("			   MOVEMENTADJUSTLINE.CREATED 		:= current_timestamp;");
	sb.appendln("			   MOVEMENTADJUSTLINE.CREATEDBY 	:= CARDING.CREATEDBY;");
	sb.appendln("			   MOVEMENTADJUSTLINE.UPDATED 		:= current_timestamp;");
	sb.appendln("			   MOVEMENTADJUSTLINE.UPDATEDBY 	:= CARDING.UPDATEDBY;			");
	sb.appendln("			   MOVEMENTADJUSTLINE.IsActive	:= 'Y';	");
	sb.appendln("			   MOVEMENTADJUSTLINE.DESCRIPTION	:= CARDING.TABLENAME || ' DocumentNo ' || CARDING.documentno;						");
	sb.appendln("			   INSERT INTO xendra.m_movementline (m_movement_id, m_movementline_id, ");
	sb.appendln("				ad_client_id, ad_org_id,");
	sb.appendln("				isactive, created, createdby, ");
	sb.appendln("				updated, updatedby, ");
	sb.appendln("				m_locator_id, m_locatorto_id, m_product_id, movementqty, ");
	sb.appendln("				c_uom_id, ");
	sb.appendln("				qtyentered, identifier)");
	sb.appendln("			   VALUES ( MOVEMENTADJUSTLINE.M_MOVEMENT_ID, MOVEMENTADJUSTLINE.M_MOVEMENTLINE_ID, ");
	sb.appendln("				 MOVEMENTADJUSTLINE.AD_Client_ID, MOVEMENTADJUSTLINE.AD_ORG_ID,");
	sb.appendln("				 MOVEMENTADJUSTLINE.ISACTIVE, MOVEMENTADJUSTLINE.CREATED, MOVEMENTADJUSTLINE.CREATEDBY, ");
	sb.appendln("				 MOVEMENTADJUSTLINE.UPDATED, MOVEMENTADJUSTLINE.UPDATEDBY,");
	sb.appendln("				 CARDING.M_LOCATOR_ID, CARDING.M_LOCATOR_ID, CARDING.M_PRODUCT_ID, ABS(COSTCALC.Stock),");
	sb.appendln("				 (SELECT C_UOM_ID FROM C_UOM WHERE AD_CLIENT_ID = Client_ID AND UOMSYMBOL = 'Un'),");
	sb.appendln("				 ABS(COSTCALC.Stock), CARDING.identifier);					 				 ");
	sb.appendln("			ELSE");
	sb.appendln("			    UPDATE xendra.m_movementline set ");
	sb.appendln("					updated = current_timestamp,					");
	sb.appendln("					m_locator_id = CARDING.M_LOCATOR_ID,");
	sb.appendln("					description = CARDING.TABLENAME || ' DocumentNo ' || CARDING.documentno,");
	sb.appendln("					m_locatorto_id = CARDING.M_LOCATOR_ID,");
	sb.appendln("					m_product_id = CARDING.M_Product_ID,");
	sb.appendln("					movementqty = ABS(COSTCALC.Stock)");
	sb.appendln("			    WHERE m_movementline.m_movementline_id = _movementadjustlineid;			");
	sb.appendln("			END IF;");
	sb.appendln("		  END IF;");
	sb.appendln("	       END IF;");
	sb.appendln("	       UPDATE M_TRANSACTION SET PROCESSED = 'Y', ERRORMSG = CASE WHEN COSTCALC.Stock < 0 THEN ERRORMSG || 'Negative' ELSE ERRORMSG || '' END");
	sb.appendln("	       WHERE M_Transaction_ID = CARDING.M_TRANSACTION_ID;");
	sb.appendln("	       _processed := array_append(_processed,CARDING.M_TRANSACTION_ID);");
	sb.appendln("	       IF NOT _defercreate THEN");
	sb.appendln("	         IF COSTCALC.m_COSTCALC_id ISNULL THEN");
	sb.appendln("		   COSTCALC.M_COSTCALC_ID := nextval('m_costcalc_seq');");
	sb.appendln("		   INSERT into xendra.m_costcalc (c_period_id, m_costcalc_id, AD_Client_ID, AD_Org_ID, M_Product_ID,M_CostElement_ID,");
	sb.appendln("				IsActive,created,createdby,updated,updatedby,");
	sb.appendln("				precost, cost,prestock, stock,");
	sb.appendln("				iscostedok,movementdate,omovementdate,");
	sb.appendln("				m_warehouse_id,	incost,	ismanual, Record_ID, AD_Table_ID, Line, Parent_ID, Master_ID, errormsg) ");
	sb.appendln("				values (");
	sb.appendln("				COSTCALC.C_PERIOD_ID, COSTCALC.M_COSTCALC_ID,	COSTCALC.AD_CLIENT_ID, COSTCALC.AD_ORG_ID,COSTCALC.M_PRODUCT_ID, ");
	sb.appendln("				COSTCALC.M_COSTELEMENT_ID, 'Y'::bpchar,	COSTCALC.created, COSTCALC.createdby, COSTCALC.updated,");
	sb.appendln("				COSTCALC.updatedby, ");
	sb.appendln("				COSTCALC.precost, COSTCALC.cost, COSTCALC.prestock, COSTCALC.stock,");
	sb.appendln("				'Y'::bpchar, COSTCALC.movementdate,");
	sb.appendln("				COALESCE(COSTCALC.omovementdate,'01/01/1969'::timestamp),COSTCALC.m_warehouse_id,COSTCALC.incost,");
	sb.appendln("				'N'::bpchar,COSTCALC.Record_id,	COSTCALC.AD_table_id,COSTCALC.Line, COSTCALC.parent_id,COSTCALC.master_id, COSTCALC.errormsg);");
	sb.appendln("	         ELSE");
	sb.appendln("		   UPDATE xendra.M_COSTCALC set cost = COSTCALC.cost, ");
	sb.appendln("				      precost = COSTCALC.precost,");
	sb.appendln("				      incost = COSTCALC.incost,	");
	sb.appendln("				      errormsg = COSTCALC.errormsg,");
	sb.appendln("				      prestock = COSTCALC.prestock,");
	sb.appendln("				      stock = COSTCALC.stock,");
	sb.appendln("				      omovementdate = COSTCALC.omovementdate ");
	sb.appendln("				      WHERE M_CostCalc.M_CostCalc_ID = costcalc.m_CostCalc_ID;");
	sb.appendln("		 END IF;");
	sb.appendln("	       END IF;	");
	sb.appendln("	       _oldstock  := COALESCE(COSTCALC.Stock,0);");
	sb.appendln("	       _oldcost   := COALESCE(COSTCALC.Cost,0);");
	sb.appendln("	       _oldincost := COALESCE(COSTCALC.InCost,0);				");
	sb.appendln("	       EXCEPTION WHEN OTHERS THEN");
	sb.appendln("		  RAISE NOTICE '% %',SQLERRM, SQLSTATE;");
	sb.appendln("		  PRODUCT_COSTING.errormsg := SQLSTATE || ' ' || SQLERRM;		  ");
	sb.appendln("		  EXIT;");
	sb.appendln("	       END;");
	sb.appendln("	  END LOOP;");
	sb.appendln("	  if (_checkStock) THEN");
	sb.appendln("		SELECT SUM (MovementQty) into _SumStock FROM M_Transaction t ");
	sb.appendln("			 WHERE t.M_Product_ID = product_ID ");
	sb.appendln("			 AND t.AD_Client_ID = Client_ID");
	sb.appendln("			 AND t.C_Period_ID = p_period_id");
	sb.appendln("			 AND t.docstatus in ('CO','CL')");
	sb.appendln("			 AND Substring(t.Movementtype,1,1) != 'M';");
	sb.appendln("		_SumStock := COALESCE(_SumStock, 0);");
	sb.appendln("		IF (_SumPrevStock + _SumStock != _oldstock) THEN				");
	sb.appendln("		   _oldstock = _SumPrevStock + _SumStock;");
	sb.appendln("		END IF;		");
	sb.appendln("	  END IF;");
	sb.appendln("	  IF NOT _abort THEN ");
	sb.appendln("	    IF (array_length(_processed, 1) > 0) THEN");
	sb.appendln("	      PRODUCT_COSTING.lastcosted 		:= current_timestamp;");
	sb.appendln("	      PRODUCT_COSTING.c_period_id 	:= p_period_id;");
	sb.appendln("	      PRODUCT_COSTING.currentcostprice 	:= _oldincost;");
	sb.appendln("	      PRODUCT_COSTING.futurecostprice 	:= 0;");
	sb.appendln("	      PRODUCT_COSTING.coststandard 	:= 0;");
	sb.appendln("	      PRODUCT_COSTING.coststandardpoqty 	:= 0;");
	sb.appendln("	      PRODUCT_COSTING.coststandardpoamt 	:= 0;");
	sb.appendln("	      PRODUCT_COSTING.coststandardcumqty 	:= 0;");
	sb.appendln("	      PRODUCT_COSTING.coststandardcumamt 	:= 0;");
	sb.appendln("	      PRODUCT_COSTING.costaverage 	:= _oldcost;");
	sb.appendln("	      PRODUCT_COSTING.costaveragecumqty 	:= _oldstock;");
	sb.appendln("	      PRODUCT_COSTING.costaveragecumamt 	:= _oldcost*_oldstock;");
	sb.appendln("	      PRODUCT_COSTING.pricelastpo 	:= _pricelastpo;");
	sb.appendln("	      PRODUCT_COSTING.pricelastinv 	:= _pricelastinv;");
	sb.appendln("	      PRODUCT_COSTING.totalinvqty 	:= _totalinvqty;");
	sb.appendln("	      PRODUCT_COSTING.totalinvamt 	:= _totalinvamt;	");
	sb.appendln("	      PRODUCT_COSTING.m_costcalc_id 	:= costcalc.m_CostCalc_ID;	    ");
	sb.appendln("	      --PRODUCT_COSTING.isactive 		:= 'Y';");
	sb.appendln("	      UPDATE m_product_costing set costaverage = PRODUCT_COSTING.costaverage, ");
	sb.appendln("					    costaveragecumqty 	= PRODUCT_COSTING.costaveragecumqty,");
	sb.appendln("					    costaveragecumamt 	= PRODUCT_COSTING.costaveragecumamt,");
	sb.appendln("					    pricelastpo		= PRODUCT_COSTING.pricelastpo,");
	sb.appendln("					    currentcostprice 	= PRODUCT_COSTING.currentcostprice,");
	sb.appendln("					    m_costcalc_id	= PRODUCT_COSTING.m_costcalc_id,");
	sb.appendln("					    errormsg		= PRODUCT_COSTING.errormsg,");
	sb.appendln("					    pricelastinv	= PRODUCT_COSTING.pricelastinv,");
	sb.appendln("					    totalinvqty		= PRODUCT_COSTING.totalinvqty,");
	sb.appendln("					    totalinvamt		= PRODUCT_COSTING.totalinvamt					    ");
	sb.appendln("		WHERE AD_Client_ID = PRODUCT_COSTING.AD_Client_ID");
	sb.appendln("		AND m_product_ID = product_id ");
	sb.appendln("		AND C_Period_ID = p_period_id;");
	sb.appendln("	      GET DIAGNOSTICS _found = ROW_COUNT;	 																												");
	sb.appendln("	      IF _found = 0 THEN");
	sb.appendln("		INSERT INTO M_Product_Costing (AD_Client_ID, AD_Org_ID,created, createdby,updated, updatedby, ");
	sb.appendln("		costaverage, costaveragecumamt,costaveragecumqty, c_period_id,  currentcostprice, ");
	sb.appendln("		isactive, lastcosted, m_costcalc_id, m_costelement_id, m_product_id, ");
	sb.appendln("		pricelastinv, pricelastpo, totalinvamt,totalinvqty, seqno) ");
	sb.appendln("		VALUES (");
	sb.appendln("		PRODUCT_COSTING.AD_Client_ID, PRODUCT_COSTING.AD_Org_ID, PRODUCT_COSTING.Created,PRODUCT_COSTING.CreatedBy,  PRODUCT_COSTING.Updated,PRODUCT_COSTING.UpdatedBy,  ");
	sb.appendln("		PRODUCT_COSTING.costaverage, PRODUCT_COSTING.costaveragecumamt,PRODUCT_COSTING.costaveragecumqty, PRODUCT_COSTING.c_period_id, PRODUCT_COSTING.currentcostprice, ");
	sb.appendln("		PRODUCT_COSTING.isactive, PRODUCT_COSTING.lastcosted, PRODUCT_COSTING.m_costcalc_id, PRODUCT_COSTING.m_costelement_id, PRODUCT_COSTING.m_product_id, ");
	sb.appendln("		PRODUCT_COSTING.pricelastinv, PRODUCT_COSTING.pricelastpo, PRODUCT_COSTING.totalinvamt,PRODUCT_COSTING.totalinvqty, PRODUCT_COSTING.seqno);				  			");
	sb.appendln("	      END IF;					");
	sb.appendln("	      IF COALESCE(PRODUCT_COSTING.errormsg,'') != '' THEN");
	sb.appendln("		UPDATE M_TRANSACTION SET PROCESSED = 'N' WHERE M_Transaction_ID = ALL (_processed); ");
	sb.appendln("		RETURN -7;");
	sb.appendln("	      ELSE");
	sb.appendln("		RETURN 0;");
	sb.appendln("	      END IF;");
	sb.appendln("	    ELSE");
	sb.appendln("	      RAISE NOTICE 'register(s) not found';");
	sb.appendln("	      if COALESCE(PREVPERIOD.C_PERIOD_ID,0) != 0 THEN");
	sb.appendln("	        SELECT count(*) into _count FROM M_PRODUCT_COSTING WHERE ");
	sb.appendln("		  M_Product_ID = product_id ");
	sb.appendln("		  AND C_PERIOD_ID = PREVPERIOD.C_PERIOD_ID");
	sb.appendln("		  AND AD_Client_ID = client_id;");
	sb.appendln("	        IF _count > 0 THEN 	  ");
	sb.appendln("	        -- update the Product_Costing with the last info");
	sb.appendln("	          UPDATE m_product_costing set costaverage = PRODUCT_COSTING.costaverage, ");
	sb.appendln("					    costaveragecumqty 	= PRODUCT_COSTING.costaveragecumqty,");
	sb.appendln("					    costaveragecumamt 	= PRODUCT_COSTING.costaveragecumamt,");
	sb.appendln("					    pricelastpo		= PRODUCT_COSTING.pricelastpo,");
	sb.appendln("					    currentcostprice 	= PRODUCT_COSTING.currentcostprice,");
	sb.appendln("					    m_costcalc_id	= PRODUCT_COSTING.m_costcalc_id,");
	sb.appendln("					    errormsg		= PRODUCT_COSTING.errormsg,");
	sb.appendln("					    pricelastinv	= PRODUCT_COSTING.pricelastinv,");
	sb.appendln("					    totalinvqty		= PRODUCT_COSTING.totalinvqty,");
	sb.appendln("					    totalinvamt		= PRODUCT_COSTING.totalinvamt					    ");
	sb.appendln("	 	    WHERE AD_Client_ID = PRODUCT_COSTING.AD_Client_ID");
	sb.appendln("		    AND m_product_ID = product_id ");
	sb.appendln("	  	    AND C_Period_ID = p_period_id;");
	sb.appendln("	          GET DIAGNOSTICS _found = ROW_COUNT;	 																												");
	sb.appendln("	          IF _found = 0 THEN");
	sb.appendln("		    INSERT INTO M_Product_Costing (AD_Client_ID, AD_Org_ID,created, createdby,updated, updatedby, ");
	sb.appendln("		      costaverage, costaveragecumamt,costaveragecumqty, c_period_id,  currentcostprice, ");
	sb.appendln("		      isactive, lastcosted, m_costcalc_id, m_costelement_id, m_product_id, ");
	sb.appendln("		      errormsg, pricelastinv, pricelastpo, totalinvamt,totalinvqty, seqno) ");
	sb.appendln("		    VALUES (");
	sb.appendln("		      PRODUCT_COSTING.AD_Client_ID, PRODUCT_COSTING.AD_Org_ID, PRODUCT_COSTING.Created,PRODUCT_COSTING.CreatedBy,  PRODUCT_COSTING.Updated,PRODUCT_COSTING.UpdatedBy,  ");
	sb.appendln("		      PRODUCT_COSTING.costaverage, PRODUCT_COSTING.costaveragecumamt,PRODUCT_COSTING.costaveragecumqty, p_period_id, PRODUCT_COSTING.currentcostprice, ");
	sb.appendln("		      PRODUCT_COSTING.isactive, PRODUCT_COSTING.lastcosted, PRODUCT_COSTING.m_costcalc_id, PRODUCT_COSTING.m_costelement_id, PRODUCT_COSTING.m_product_id, ");
	sb.appendln("		      PRODUCT_COSTING.errormsg, PRODUCT_COSTING.pricelastinv, PRODUCT_COSTING.pricelastpo, PRODUCT_COSTING.totalinvamt,PRODUCT_COSTING.totalinvqty, PRODUCT_COSTING.seqno + 1);				  			");
	sb.appendln("	          END IF;	");
	sb.appendln("	          IF (_checkStock) THEN			");
	sb.appendln("		    UPDATE m_product_costing set costaveragecumqty = _SumPrevStock + _SumStock ");
	sb.appendln("			WHERE AD_Client_ID = PRODUCT_COSTING.AD_Client_ID");
	sb.appendln("			AND m_product_ID = product_id ");
	sb.appendln("			AND C_Period_ID = p_period_id;");
	sb.appendln("		  END IF;							    ");
	sb.appendln("	        END IF;");
	sb.appendln("	    END IF;");
	sb.appendln("	  END IF;");
	sb.appendln("	    RETURN 0;");
	sb.appendln("	  ELSE");
	sb.appendln("	    --RAISE EXCEPTION 'Productos con costo 0 cancela hasta la siguiente ejecucion' USING HINT = 'falta costear productos en produccion';			     ");
	sb.appendln("	    RETURN -2;	        	    ");
	sb.appendln("	  END IF;");
	sb.appendln("END;");
	return sb.toString();
}
	public static final String getComments() 
{
 	StrBuilder sb = new StrBuilder();
 	sb.appendln("@Synchronized=2017-12-23 09:35:22.0");
	sb.appendln("@depends=getcostfrominvoiceline");
	sb.appendln("");
	sb.appendln("@Identifier=0f540aca-9ea8-76d2-2869-4d99deb3c667");
	return sb.toString();
}
}
