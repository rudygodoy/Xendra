package org.compiere.model.function;


import org.xendra.annotations.*;
import org.apache.commons.lang.text.StrBuilder;
public class Materialpolicy0 
{
 
@XendraFunction(Name="materialpolicy",Output="character",Owner="xendra",Language="plpgsql",
Identifier="839401d0-c8ca-ac5b-761b-3d937830adf4",
Arguments="client_id numeric, costelement_id numeric, synchronized boolean",Extension="",
Synchronized="2020-02-16 00:39:04.0")
	public static final String Identifier = "839401d0-c8ca-ac5b-761b-3d937830adf4";

	public static final String getCode() 
{
 	StrBuilder sb = new StrBuilder();
 	sb.appendln("DECLARE");
	sb.appendln("	xx TIMESTAMP;");
	sb.appendln("	yy TIMESTAMP;");
	sb.appendln("	_startdate timestamp;");
	sb.appendln("	_periodstart timestamp;");
	sb.appendln("	_periodend timestamp;");
	sb.appendln("	ar record;");
	sb.appendln("	test record;");
	sb.appendln("	resetproduct record;");
	sb.appendln("	resetdoc record;");
	sb.appendln("	products record;");
	sb.appendln("	dtiocost character varying;");
	sb.appendln("	dtonlycost character varying;");
	sb.appendln("	dtonlyio character varying;");
	sb.appendln("	costtables character varying[];");
	sb.appendln("	seqnoorder character varying;");
	sb.appendln("	costdates character varying[];	");
	sb.appendln("	docbasetype character varying[];");
	sb.appendln("	sqltext character varying;");
	sb.appendln("	_child character varying;");
	sb.appendln("	_docbasetype character varying;");
	sb.appendln("	_parentid numeric;");
	sb.appendln("	_count numeric;");
	sb.appendln("	_idperiodend numeric;");
	sb.appendln("	_existinarray boolean;");
	sb.appendln("	_productreset numeric[];");
	sb.appendln("	_productcost numeric[];");
	sb.appendln("	_productrecost numeric[];");
	sb.appendln("	_recoststatus numeric[];");
	sb.appendln("	_resultcost  numeric;");
	sb.appendln("	_productid numeric;");
	sb.appendln("	_inventoryid numeric;");
	sb.appendln("	_found NUMERIC := 0;");
	sb.appendln("	COSTELEMENT xendra.m_costelement%ROWTYPE;");
	sb.appendln("BEGIN");
	sb.appendln("	-- Configure");
	sb.appendln("	SELECT m_inventory_id,");
	sb.appendln("	       string_to_array(properties->'dates',','),");
	sb.appendln("	       properties->'dtiocost',properties->'dtonlycost', properties->'dtonlyio',");
	sb.appendln("	       string_to_array(properties->'tables',','), properties->'seqno',");
	sb.appendln("	       startdate into ");
	sb.appendln("	       _inventoryid,");
	sb.appendln("	       costdates, ");
	sb.appendln("	       dtiocost, dtonlycost, dtonlyio,");
	sb.appendln("	       costtables,seqnoorder,");
	sb.appendln("	       _startdate");
	sb.appendln("	FROM m_materialpolicy where ad_client_id = Client_ID;");
	sb.appendln("	docbasetype = string_to_array(concat(dtiocost,");
	sb.appendln("	CASE WHEN length(dtonlycost) > 0 AND left(dtonlycost,1) != ',' then ',' else '' END,");
	sb.appendln("	dtonlycost,");
	sb.appendln("	CASE WHEN length(dtonlyio) > 0 AND left(dtonlyio,1) != ',' then ',' else '' END,");
	sb.appendln("	dtonlyio),',');");
	sb.appendln("	raise notice 'docbasetype %',docbasetype;");
	sb.appendln("	IF array_length(docbasetype,1) > 0 THEN	");
	sb.appendln("	  for i in array_lower(docbasetype,1)..array_upper(docbasetype,1)		");
	sb.appendln("	  LOOP				");
	sb.appendln("	   _docbasetype = docbasetype[i];");
	sb.appendln("	   SELECT COUNT(*) into _found FROM C_DocType dt ");
	sb.appendln("	    where dt.docbasetype in  (_docbasetype) AND dt.TRANSACTIONTYPE isnull AND ad_client_id = Client_ID;");
	sb.appendln("	   IF (_found > 0) THEN");
	sb.appendln("	     RETURN _docbasetype || ' no tienen definido(s) transactiontype';");
	sb.appendln("	   END IF;							");
	sb.appendln("	  END LOOP;");
	sb.appendln("	END IF;	");
	sb.appendln("	SELECT * into COSTELEMENT from xendra.M_COSTELEMENT ");
	sb.appendln("		  WHERE m_costelement_id = costelement_id;");
	sb.appendln("	IF COSTELEMENT.c_currency_id isnull THEN");
	sb.appendln("		RETURN COSTELEMENT.name || ' no tiene definido moneda';");
	sb.appendln("	END IF;");
	sb.appendln("	if _periodstart isnull then");
	sb.appendln("	   SELECT startdate into _periodstart ");
	sb.appendln("	   from c_period where date(_startdate) BETWEEN startdate AND enddate AND AD_Client_ID = Client_ID;");
	sb.appendln("	END IF;	");
	sb.appendln("	select enddate,c_period_id into _periodend,_idperiodend from c_period where date(now()) BETWEEN startdate AND enddate AND AD_Client_ID = Client_ID;	");
	sb.appendln("	if _periodend isnull then");
	sb.appendln("		select enddate,c_period_id into _periodend,_idperiodend from c_period where startdate = (select max(startdate) from c_period where ad_client_id = client_id);");
	sb.appendln("	end if;	");
	sb.appendln("	IF (synchronized) THEN");
	sb.appendln("	  xx := clock_timestamp();");
	sb.appendln("	  UPDATE m_transaction set c_period_id = (SELECT c_period_id from c_period where movementdate ");
	sb.appendln("		between startdate and enddate and ad_client_id = Client_ID) ");
	sb.appendln("		where c_period_id isnull AND AD_Client_ID = Client_ID;");
	sb.appendln("  	  FOR ar in SELECT c_period_id from c_period where startdate >= _periodstart ");
	sb.appendln("		AND enddate <= _periodend ");
	sb.appendln("		AND ad_client_id = client_id order by startdate");
	sb.appendln("		LOOP");
	sb.appendln("		  raise notice 'period %', ar.c_period_id;");
	sb.appendln("		  update m_transaction set processed = 'N' where c_period_id = ar.c_period_id;");
	sb.appendln("		  DELETE FROM M_COSTCALC where ad_client_id = Client_ID and c_period_id = ar.c_period_id;");
	sb.appendln("		  DELETE FROM M_STORAGEMONTHLY where ad_client_id = Client_ID and c_period_id = ar.c_period_id;");
	sb.appendln("		  DELETE FROM M_PRODUCT_COSTING where ad_client_id = Client_ID and c_period_id = ar.c_period_id;		");
	sb.appendln("		END LOOP;");
	sb.appendln("	  yy := clock_timestamp();");
	sb.appendln("	  RAISE NOTICE 'sync %',yy-xx;");
	sb.appendln("	END IF;		");
	sb.appendln("	IF NOT _inventoryid ISNULL THEN");
	sb.appendln("	   SELECT movementdate into _periodstart FROM M_INVENTORY where m_inventory_id = _inventoryid;		  ");
	sb.appendln("	end if;");
	sb.appendln("	raise notice 'period start %', _periodstart;");
	sb.appendln("	raise notice 'date start %', _startdate;	");
	sb.appendln("	IF (synchronized) THEN");
	sb.appendln("	  for i in array_lower(costtables,1)..array_upper(costtables,1)");
	sb.appendln("	  LOOP	");
	sb.appendln("	    EXECUTE format('select tablename from ad_table where ad_table_id in (SELECT AD_Table_ID from ad_column where Columnname = ''%s'' AND isparent=''Y'')',costtables[i] || '_ID') into _child;");
	sb.appendln("	    EXECUTE format('select ad_table_id from ad_table where tablename = ''%s''', costtables[i]) into _parentid;");
	sb.appendln("	    sqltext := 'DELETE FROM M_TRANSACTION WHERE ' || _child || '_ID NOT IN (SELECT '|| _child || '_id from '||_child||')';");
	sb.appendln("	    EXECUTE format(sqltext);		");
	sb.appendln("	    sqltext := 'SELECT COUNT(*) FROM xendra.M_TRANSACTION t,' || costtables[i]|| ' zz';");
	sb.appendln("	    sqltext := sqltext || ' WHERE t.AD_Client_ID = ' || client_id;");
	sb.appendln("	    sqltext := sqltext || ' AND t.movementdate != zz.' || costdates[i];");
	sb.appendln("	    sqltext := sqltext || ' AND t.ad_table_id = ' || _parentid;");
	sb.appendln("	    sqltext := sqltext || ' AND t.record_id = zz.' || costtables[i] || '_id';");
	sb.appendln("	    EXECUTE format(sqltext) into _found;");
	sb.appendln("	    if _found > 0 then ");
	sb.appendln("		sqltext := 'UPDATE m_transaction t set movementdate = zz.'|| costdates[i]||' from '|| costtables[i] ||' zz';");
	sb.appendln("		sqltext := sqltext || ' WHERE t.AD_Client_ID = ' || client_id;");
	sb.appendln("		sqltext := sqltext || ' AND t.movementdate != zz.' || costdates[i];");
	sb.appendln("		sqltext := sqltext || ' AND t.ad_table_id = ' || _parentid;");
	sb.appendln("		sqltext := sqltext || ' AND t.record_id = zz.' || costtables[i] || '_id';");
	sb.appendln("		EXECUTE format(sqltext);");
	sb.appendln("	    end if;");
	sb.appendln("	  END LOOP;	  ");
	sb.appendln("	END IF;");
	sb.appendln("	for ar in select c_period_id from c_period where startdate >= _periodstart ");
	sb.appendln("		AND enddate <= _periodend ");
	sb.appendln("		AND ad_client_id = client_id order by startdate");
	sb.appendln("	LOOP");
	sb.appendln("           raise notice 'period %', ar.c_period_id;");
	sb.appendln("	   for i in array_lower(costtables,1)..array_upper(costtables,1)");
	sb.appendln("	   LOOP");
	sb.appendln("		--if not firstrun then");
	sb.appendln("		EXECUTE format('select tablename from ad_table where ad_table_id in (SELECT AD_Table_ID from ad_column where Columnname = ''%s'' AND isparent=''Y'')',costtables[i] || '_ID') into _child;");
	sb.appendln("		--");
	sb.appendln("		sqltext := 'SELECT COUNT(*) FROM ';");
	sb.appendln("		sqltext := sqltext || _child || ' zzchild';");
	sb.appendln("		sqltext := sqltext || ' JOIN '||costtables[i] || ' zz  on zz.'||costtables[i]||'_ID=zzchild.'||costtables[i]||'_ID ';");
	sb.appendln("		sqltext := sqltext || ' LEFT JOIN M_Transaction t ON zzchild.'||_child||'_ID = t.'||_child||'_ID ';");
	sb.appendln("		sqltext := sqltext || ' JOIN C_PERIOD p on zz.'|| costdates[i] ||'::date BETWEEN p.startdate AND p.enddate AND p.c_period_id = '|| ar.c_period_id; ");
	sb.appendln("		sqltext := sqltext || ' JOIN C_DocType dt on zz.c_doctype_id = dt.c_doctype_id AND docbasetype in ('''||array_to_string(docbasetype,''',''')||''')';");
	sb.appendln("		sqltext := sqltext || ' AND zz.AD_Client_ID='||Client_ID||' AND zz.Processed=''Y''';");
	sb.appendln("		sqltext := sqltext || ' AND t.'||_child||'_ID ISNULL';");
	sb.appendln("		sqltext := sqltext || ' AND zz.DocStatus in (''CO'',''CL'') AND zz.IsActive=''Y''';");
	sb.appendln("		execute format(sqltext) into _count;");
	sb.appendln("		if _count > 0 then ");
	sb.appendln("			sqltext := 'SELECT distinct zz.'||costtables[i]||'_ID FROM ';");
	sb.appendln("			sqltext := sqltext || _child || ' zzchild';");
	sb.appendln("			sqltext := sqltext || ' JOIN '||costtables[i] || ' zz  on zz.'||costtables[i]||'_ID=zzchild.'||costtables[i]||'_ID ';");
	sb.appendln("			sqltext := sqltext || ' LEFT JOIN M_Transaction t ON zzchild.'||_child||'_ID = t.'||_child||'_ID ';");
	sb.appendln("			sqltext := sqltext || ' JOIN C_PERIOD p on zz.'|| costdates[i] ||'::date BETWEEN p.startdate AND p.enddate AND p.c_period_id = '|| ar.c_period_id; ");
	sb.appendln("			sqltext := sqltext || ' JOIN C_DocType dt on zz.c_doctype_id = dt.c_doctype_id AND docbasetype in ('''||array_to_string(docbasetype,''',''')||''')';");
	sb.appendln("			sqltext := sqltext || ' AND zz.AD_Client_ID='||Client_ID||' AND zz.Processed=''Y''';");
	sb.appendln("			sqltext := sqltext || ' AND t.'||_child||'_ID ISNULL';");
	sb.appendln("			sqltext := sqltext || ' AND zz.DocStatus in (''CO'',''CL'') AND zz.IsActive=''Y''';			");
	sb.appendln("			for resetdoc in execute format(sqltext)");
	sb.appendln("			loop");
	sb.appendln("			   if costtables[i] = 'M_InOut' then 	");
	sb.appendln("				perform loaddocumentinout(resetdoc.m_inout_id, ar.c_period_id);	");
	sb.appendln("				for resetproduct in select distinct m_product_id from m_inoutline where m_inout_id = resetdoc.m_inout_id					");
	sb.appendln("				LOOP");
	sb.appendln("					SELECT case when resetproduct.m_product_id = ANY(_productreset) then true else false end into _existinarray;   		");
	sb.appendln("					IF NOT _existinarray THEN																	  ");
	sb.appendln("					  perform resetcostproduct(ar.c_period_id,_idperiodend,Client_ID, resetproduct.m_product_id);");
	sb.appendln("					  _productreset := array_append(_productreset,resetproduct.m_product_id);");
	sb.appendln("					END IF;				   ");
	sb.appendln("				END LOOP;					");
	sb.appendln("				sqltext := 'update '||costtables[i]||' set iscosted = ''N'' where '||costtables[i]||'_ID = '||resetdoc.m_inout_id;				   ");
	sb.appendln("				execute format(sqltext);");
	sb.appendln("			   ELSIF costtables[i] = 'M_Inventory' then");
	sb.appendln("				raise notice 'inventory % period %',resetdoc.m_inventory_id, ar.c_period_id;");
	sb.appendln("				perform loaddocumentinventory(resetdoc.m_inventory_id, ar.c_period_id);");
	sb.appendln("				FOR resetproduct in select distinct m_product_id from m_inventoryline where m_inventory_id = resetdoc.m_inventory_id");
	sb.appendln("				LOOP");
	sb.appendln("					SELECT case when resetproduct.m_product_id = ANY(_productreset) then true else false end into _existinarray;   		");
	sb.appendln("					IF NOT _existinarray THEN																	  ");
	sb.appendln("					  perform resetcostproduct(ar.c_period_id,_idperiodend,Client_ID, resetproduct.m_product_id);");
	sb.appendln("					  _productreset := array_append(_productreset,resetproduct.m_product_id);");
	sb.appendln("					END IF;				   						");
	sb.appendln("				END LOOP;");
	sb.appendln("				sqltext := 'update '||costtables[i]||' set iscosted = ''N'' where '||costtables[i]||'_ID = '||resetdoc.m_inventory_id;				   ");
	sb.appendln("				execute format(sqltext);					   								  						  ");
	sb.appendln("			   ELSIF costtables[i] = 'M_Production' then");
	sb.appendln("				perform loaddocumentproduction(resetdoc.m_production_id, ar.c_period_id);");
	sb.appendln("				FOR resetproduct in select distinct pl.m_product_id from m_production p");
	sb.appendln("					JOIN m_productionplan pla ON pla.m_production_id = p.m_production_id");
	sb.appendln("					JOIN m_productionline pl ON pla.m_productionplan_id = pl.m_productionplan_id ");
	sb.appendln("				where p.m_production_id = resetdoc.m_production_id");
	sb.appendln("				LOOP");
	sb.appendln("					SELECT case when resetproduct.m_product_id = ANY(_productreset) then true else false end into _existinarray;   		");
	sb.appendln("					IF NOT _existinarray THEN																	  ");
	sb.appendln("					  perform resetcostproduct(ar.c_period_id,_idperiodend,Client_ID, resetproduct.m_product_id);");
	sb.appendln("					  _productreset := array_append(_productreset,resetproduct.m_product_id);");
	sb.appendln("					END IF;				   ");
	sb.appendln("				END LOOP;				   					");
	sb.appendln("				sqltext := 'update '||costtables[i]||' set iscosted = ''N'' where '||costtables[i]||'_ID = '||resetdoc.m_production_id;");
	sb.appendln("				execute format(sqltext);					");
	sb.appendln("			   ELSIF costtables[i] = 'C_Invoice' then");
	sb.appendln("				perform loaddocumentinvoice(resetdoc.c_invoice_id, ar.c_period_id);");
	sb.appendln("				FOR resetproduct in select distinct m_product_id from c_invoiceline where c_invoice_id = resetdoc.c_invoice_id");
	sb.appendln("				LOOP");
	sb.appendln("					SELECT case when resetproduct.m_product_id = ANY(_productreset) then true else false end into _existinarray;   		");
	sb.appendln("					IF NOT _existinarray THEN																	  ");
	sb.appendln("					  perform resetcostproduct(ar.c_period_id,_idperiodend,Client_ID, resetproduct.m_product_id);");
	sb.appendln("					  _productreset := array_append(_productreset,resetproduct.m_product_id);");
	sb.appendln("					END IF;				   						");
	sb.appendln("				END LOOP;				   ");
	sb.appendln("				sqltext := 'update '||costtables[i]||' set iscosted = ''N'' where '||costtables[i]||'_ID = '||resetdoc.c_invoice_id;");
	sb.appendln("				execute format(sqltext);");
	sb.appendln("			   ELSIF costtables[i] = 'M_Movement' then");
	sb.appendln("				perform loaddocumentmovement(resetdoc.m_movement_id, ar.c_period_id);");
	sb.appendln("				FOR resetproduct in select distinct m_product_id from m_movementline where m_movement_id = resetdoc.m_movement_id");
	sb.appendln("				LOOP");
	sb.appendln("					SELECT case when resetproduct.m_product_id = ANY(_productreset) then true else false end into _existinarray;   		");
	sb.appendln("					IF NOT _existinarray THEN																	  ");
	sb.appendln("					  perform resetcostproduct(ar.c_period_id,_idperiodend,Client_ID, resetproduct.m_product_id);");
	sb.appendln("					  _productreset := array_append(_productreset,resetproduct.m_product_id);");
	sb.appendln("					END IF;				   ");
	sb.appendln("				END LOOP;				   ");
	sb.appendln("				sqltext := 'update '||costtables[i]||' set iscosted = ''N'' where '||costtables[i]||'_ID = '||resetdoc.m_movement_id;");
	sb.appendln("				execute format(sqltext);");
	sb.appendln("			   end if;");
	sb.appendln("			end loop;");
	sb.appendln("		end if;		");
	sb.appendln("		raise notice 'count %',_count;");
	sb.appendln("		-- update costed ");
	sb.appendln("		sqltext := 'SELECT COUNT(*) FROM ';");
	sb.appendln("		sqltext := sqltext || _child || ' zzchild';");
	sb.appendln("		sqltext := sqltext || ' JOIN '||costtables[i] || ' zz  on zz.'||costtables[i]||'_ID=zzchild.'||costtables[i]||'_ID ';");
	sb.appendln("		sqltext := sqltext || ' LEFT JOIN M_Transaction t ON zzchild.'||_child||'_ID = t.'||_child||'_ID ';");
	sb.appendln("		sqltext := sqltext || ' JOIN C_PERIOD p on zz.'|| costdates[i] ||'::date BETWEEN p.startdate AND p.enddate AND p.c_period_id = '|| ar.c_period_id; ");
	sb.appendln("		sqltext := sqltext || ' JOIN C_DocType dt on zz.c_doctype_id = dt.c_doctype_id AND docbasetype in ('''||array_to_string(docbasetype,''',''')||''')';");
	sb.appendln("		sqltext := sqltext || ' AND zz.AD_Client_ID='||Client_ID||' AND zz.Processed=''Y''';");
	sb.appendln("		sqltext := sqltext || ' AND NOT t.'||_child||'_ID ISNULL';");
	sb.appendln("		sqltext := sqltext || ' AND zz.IsCosted=''N''';");
	sb.appendln("		execute format(sqltext) into _count;");
	sb.appendln("		IF _count > 0 then ");
	sb.appendln("		  sqltext := 'update '||costtables[i]||' zz set iscosted = ''Y'' from '||_child||' zzchild,m_transaction t,C_PERIOD p ';");
	sb.appendln("		  sqltext := sqltext || ' where zz.'||costtables[i]||'_id = zzchild.'||costtables[i]||'_id';");
	sb.appendln("		  sqltext := sqltext || ' AND zzchild.'||_child||'_id = t.'||_child||'_id  AND NOT t.'||_child||'_id ISNULL';");
	sb.appendln("		  sqltext := sqltext || ' AND zz.'|| costdates[i] ||'::date BETWEEN p.startdate AND p.enddate AND p.c_period_id = '|| ar.c_period_id;");
	sb.appendln("		  sqltext := sqltext || ' AND  zz.iscosted = ''N''';				  ");
	sb.appendln("		  execute format(sqltext);			");
	sb.appendln("		END IF;		");
	sb.appendln("	   END LOOP;");
	sb.appendln("	END LOOP;");
	sb.appendln("	-- load the data, now start to process the cost");
	sb.appendln("		for ar in select c_period_id from c_period where startdate >= _periodstart ");
	sb.appendln("			AND enddate <= _periodend ");
	sb.appendln("			AND ad_client_id = client_id order by startdate");
	sb.appendln("		LOOP		");
	sb.appendln("			for products in select distinct m_product_id from m_transaction where c_period_id = ar.c_period_id AND ad_client_id = client_id AND COALESCE(processed,'N') = 'N'");
	sb.appendln("			LOOP	");
	sb.appendln("			    SELECT case when products.m_product_id = ANY(_productcost) then true else false end into _existinarray;   		");
	sb.appendln("			    IF NOT _existinarray THEN");
	sb.appendln("			      _productcost := array_append(_productcost,products.m_product_id);");
	sb.appendln("			    END IF;");
	sb.appendln("			END LOOP;");
	sb.appendln("		END LOOP;	");
	sb.appendln("		raise notice 'cantidad productos %', array_length(_productcost,1);	");
	sb.appendln("		for ar in select c_period_id from c_period where startdate >= _periodstart ");
	sb.appendln("			AND enddate <= _periodend ");
	sb.appendln("			AND ad_client_id = client_id order by startdate");
	sb.appendln("		LOOP");
	sb.appendln("			xx := clock_timestamp();			     ");
	sb.appendln("			for i in array_lower(_productcost,1)..array_upper(_productcost,1)");
	sb.appendln("			LOOP								");
	sb.appendln("			    SELECT count(*) into _count FROM m_transaction where ");
	sb.appendln("				m_product_id = _productcost[i] ");
	sb.appendln("				AND left(movementtype,2) = 'P+'				");
	sb.appendln("				AND c_period_id = ar.c_period_id;");
	sb.appendln("			    IF _count = 0 then ");
	sb.appendln("			      select costaveragemonth(client_id, _productcost[i], costelement_id ,ar.c_period_id) into _resultcost;");
	sb.appendln("			      if (_resultcost != 0) then");
	sb.appendln("				--raise notice 'product cost  % failed with result %', _productcost[i], _resultcost;");
	sb.appendln("				SELECT case when _productcost[i] = ANY(_productrecost) then true else false end into _existinarray;   		");
	sb.appendln("				IF NOT _existinarray THEN");
	sb.appendln("				  _productrecost := array_append(_productrecost,_productcost[i]);");
	sb.appendln("				  _recoststatus := array_append(_recoststatus,_resultcost);");
	sb.appendln("				END IF;			");
	sb.appendln("			       END IF;");
	sb.appendln("			    END IF;			    ");
	sb.appendln("			END LOOP;");
	sb.appendln("			for i in array_lower(_productcost,1)..array_upper(_productcost,1)");
	sb.appendln("			LOOP								");
	sb.appendln("			    SELECT count(*) into _count FROM m_transaction where ");
	sb.appendln("				m_product_id = _productcost[i] ");
	sb.appendln("				AND left(movementtype,2) = 'P+'				");
	sb.appendln("				AND c_period_id = ar.c_period_id;");
	sb.appendln("			    IF _count > 0 then ");
	sb.appendln("			      select costaveragemonth(client_id, _productcost[i], costelement_id ,ar.c_period_id) into _resultcost;");
	sb.appendln("			      if (_resultcost != 0) then");
	sb.appendln("				--raise notice 'product cost  % failed with result %', _productcost[i], _resultcost;");
	sb.appendln("				SELECT case when _productcost[i] = ANY(_productrecost) then true else false end into _existinarray;   		");
	sb.appendln("				IF NOT _existinarray THEN");
	sb.appendln("				  _productrecost := array_append(_productrecost,_productcost[i]);");
	sb.appendln("				  _recoststatus := array_append(_recoststatus,_resultcost);");
	sb.appendln("				END IF;			");
	sb.appendln("			       END IF;");
	sb.appendln("			    END IF;			    ");
	sb.appendln("			END LOOP;			");
	sb.appendln("		    	yy := clock_timestamp();");
	sb.appendln("			RAISE NOTICE 'cost period % %',ar.c_period_id, yy-xx;");
	sb.appendln("			IF array_length(_productrecost,1) > 0 THEN");
	sb.appendln("				for i in array_lower(_productrecost,1)..array_upper(_productrecost,1)");
	sb.appendln("				LOOP	");
	sb.appendln("				    if _recoststatus[i] != 0 then");
	sb.appendln("				    xx := clock_timestamp();");
	sb.appendln("				    select costaveragemonth(client_id, _productrecost[i], costelement_id ,ar.c_period_id) into _resultcost;");
	sb.appendln("				    _recoststatus[i] := _resultcost;");
	sb.appendln("				    if (_resultcost != 0) then			");
	sb.appendln("					--raise notice 'product recost  % in period % failed with result %', _productrecost[i], ar.c_period_id, _resultcost;			    		");
	sb.appendln("				    end if;");
	sb.appendln("				    yy := clock_timestamp();");
	sb.appendln("				    --RAISE NOTICE 'cost period % product % %',ar.c_period_id, _productcost[i],yy-xx;");
	sb.appendln("				    end if;");
	sb.appendln("				END LOOP;					");
	sb.appendln("				_productrecost := '{}';");
	sb.appendln("				_recoststatus := '{}';			");
	sb.appendln("			END IF;		");
	sb.appendln("		END LOOP;	");
	sb.appendln("		RETURN '';");
	sb.appendln("END");
	return sb.toString();
}
	public static final String getComments() 
{
 	StrBuilder sb = new StrBuilder();
 	sb.appendln("@Synchronized=2020-02-16 00:39:04.0");
	sb.appendln("@Identifier=839401d0-c8ca-ac5b-761b-3d937830adf4");
	return sb.toString();
}
}
