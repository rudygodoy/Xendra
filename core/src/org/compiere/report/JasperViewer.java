/*
 * Class JasperViewer.
 */
package org.compiere.report;

import java.awt.BorderLayout;
import java.awt.event.KeyAdapter;
import java.awt.event.KeyEvent;
import java.io.File;
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.SQLException;
import java.util.HashMap;

import net.sf.jasperreports.engine.JRException;
import net.sf.jasperreports.engine.JasperCompileManager;
import net.sf.jasperreports.engine.JasperFillManager;
import net.sf.jasperreports.engine.JasperPrint;
import net.sf.jasperreports.engine.JasperReport;
import net.sf.jasperreports.engine.export.JRTextExporter;
import net.sf.jasperreports.engine.export.JRTextExporterParameter;

import org.compiere.db.CConnection;
import org.xendra.report.MyImplementation;

/**
 * 
 * Originally base code  from compiere.co.uk
 * ---
 * Modifications: Separate from ReportStarter to share with yperlink reports-
 * Allow Jasper to handle hyperlinks to simulate drilldown reports
 * 	.
 * @author Carlos Arana R., Allow the handling for reference hyperlinks.
 */
public class JasperViewer extends javax.swing.JFrame {

	private static final long serialVersionUID = 1192807883081180999L;
	
	private String m_title;
	
    /** Creates new form JasperViewer */
    /**
     * @param jasperPrint report to display
     * @param frameTitle Title to be displayed
     * @throws JRException
     */
    protected JasperViewer(JasperPrint jasperPrint,String frameTitle) throws JRException {
        this.m_title = frameTitle;
    	initComponents();
        JasperReportViewer viewer = new JasperReportViewer(this, jasperPrint);
        this.pnlMain.add(viewer, BorderLayout.CENTER);
    }


    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    private void initComponents()//GEN-BEGIN:initComponents
    {
        pnlMain = new javax.swing.JPanel();

        setTitle(m_title);
        addWindowListener(new java.awt.event.WindowAdapter() {
            @Override
			public void windowClosing(java.awt.event.WindowEvent evt) {
                exitForm();
            }
        });
        addKeyListener( new KeyAdapter() {
            @Override
			public void keyPressed(KeyEvent event) {
                if (event.getKeyCode() == KeyEvent.VK_ESCAPE) exitForm();
            }

            @Override
			public void keyTyped(KeyEvent event) {
                super.keyTyped(event);
            }
        });

        pnlMain.setLayout(new java.awt.BorderLayout());

        getContentPane().add(pnlMain, java.awt.BorderLayout.CENTER);

        pack();
        java.awt.Dimension screenSize = java.awt.Toolkit.getDefaultToolkit().getScreenSize();
        setSize(new java.awt.Dimension(750, 550));
        setLocation((screenSize.width - 750) / 2, (screenSize.height - 550) / 2);
    }//GEN-END:initComponents

    /** Exit the Application */
    private void exitForm() {//GEN-FIRST:event_exitForm
    	setVisible(false);
        dispose();
    }//GEN-LAST:event_exitForm


    /**
     *
     */
    public static void viewReport(JasperPrint jasperPrint) throws JRException {
        JasperViewer jasperViewer = new JasperViewer(jasperPrint,"JasperReport");
        jasperViewer.setVisible(true);
    }
    public static void viewReport(JasperPrint jasperPrint,String frameTitle) throws JRException {
        JasperViewer jasperViewer = new JasperViewer(jasperPrint,frameTitle);
        jasperViewer.setVisible(true);
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel pnlMain;
    // End of variables declaration//GEN-END:variables

    /**
	* @param args the command line arguments
	*/
	public static void main(String args[]) {
        try {
        	JasperReport myjasperReport = JasperCompileManager.compileReport(args[0]);
        	HashMap<String, Object> params = new HashMap<String, Object>();
        	params.put("AD_PINSTANCE_ID", new Integer(123));
        	MyImplementation xx = new MyImplementation();
        	JasperPrint myjasperPrint = JasperFillManager.fillReport( myjasperReport, params, xx);
        	JRTextExporter exporter = new JRTextExporter();
        	File file = new File("/home/xapiens/pos.txt");
        	exporter.setParameter(JRTextExporterParameter.JASPER_PRINT, myjasperPrint);
        	exporter.setParameter(JRTextExporterParameter.OUTPUT_FILE, file);
        	exporter.setParameter(JRTextExporterParameter.CHARACTER_HEIGHT, Integer.valueOf("15"));
        	exporter.setParameter(JRTextExporterParameter.CHARACTER_WIDTH, Integer.valueOf("1"));        	
        	exporter.exportReport();
            JasperViewer.viewReport(myjasperPrint);
           } 
        catch (Exception e) {
            e.printStackTrace();
        }
    }

	public static Connection getConnection(String args[])
	{
		CConnection compiereConnection = CConnection.get();
		
        try {
        	DriverManager.registerDriver(new org.postgresql.Driver());
        	
            //this is for test only
            return DriverManager.getConnection(args[1], args[2], args[3]);
        } catch (SQLException e) {
            e.printStackTrace();
            return null;
        }		
	}
    public static Connection getConnection() {
        try {
            DriverManager.registerDriver(new org.postgresql.Driver());
            //this is for test only prefer testingby calling org.compiere.report.JaserViewer JDBC_CONNECTION JDBC_USER JDBC_PASS
            return DriverManager.getConnection("jdbc:postgresql://localhost:5432/america", "xendra", "xendra");
        } catch (SQLException e) {
            e.printStackTrace();
            return null;
        }
    }

}
