<?xml version="1.0" encoding="UTF-8"?>
<project name="inventory" default="catalog" basedir=".">
	<description>
		This buildfile is used to build the movement plugin
	</description>
	<!-- set global properties for this build -->
	<property name="src" value="src"/>
	<property name="build.dir" value="build"/>
	<property name="dist.dir" value="../lib"/>
	<property name="plugin_id" value="org.xendra.inventory"/>
	<property name="jar.path" value="../lib"/>
	<property name="jar.name" value="inventory"/>
	<property name="rule.in.dir" value="./src/org/xendra/drools"/>
	<property name="rule.out.dir" value="./src/org/xendra/rules"/>
	<property name="message.in.dir" value="./src/org/xendra/hornetq"/>
	<property name="message.out.dir" value="./src/org/xendra/messages"/>
	<import file="../utils_dev/properties.xml"/>
	<path id="project.class.path">
		<pathelement path="${classpath}"/>
		<pathelement path="${jar.path}/common.jar"/>
		<pathelement path="${jar.path}/postgresql.jar"/>
		<pathelement path="${jar.path}/core.jar"/>
		<pathelement path="${jar.path}/holon.jar"/>
		<pathelement path="${jar.path}/Drools.jar"/>
	</path>
	<target name="clientInit" description="initialization target">
		<echo message="==== build inventory"/>
		<tstamp>
			<format property="timestamp" pattern="yyyy-MM-dd HH:mm:ss" />
		</tstamp>
		<mkdir dir="${build.dir}"/>
		<mkdir dir="${plugin_id}"/>
		<!-- check for the distribution directory -->
		<available file="${dist.dir}" type="dir" property="dist.dir.exists"/>
		<uptodate property="jar.uptodate" 
				targetfile="${dist.dir}/${jar.name}.jar">
			<srcfiles dir="${src}" includes="**/*.java"/>
		</uptodate>
	</target>
	<target name="clientMakedir" depends="clientInit" unless="dist.dir.exists">
		<mkdir dir="${dist.dir}"/>
	</target>
	<target name="clientCompile" depends="clientMakedir">
	<java fork="true" classname="org.xendra.developer.GenerateRule" >
		<arg value="${rule.in.dir}"/>
		<arg value="${rule.out.dir}"/>
		<classpath refid="project.class.path"/>
	</java>
	<!-- compile the java code from ${src}  into ${build.dir} -->
	<javac srcdir="${src}" destdir="${build.dir}" deprecation="off" debug="on">
		<classpath refid="project.class.path"/>
	</javac>
	<!-- copy all images & sound files from src to the build directory -->
	<copy todir="${build.dir}">
		<fileset dir="${src}">
			<include name="**/images/*"/>
			<include name="**/*.gif"/>
			<include name="**/*.jpg"/>
			<include name="**/*.png"/>
			<include name="**/*.xml"/>
			<include name="**/*.properties"/>
			<exclude name="**/package.html"/>
		</fileset>
	</copy>
</target>
<target name="clientDistribute" depends="clientCompile" unless="jar.uptodate">
	<jar jarfile="${plugin_id}/${jar.name}.jar" basedir="${build.dir}" duplicate="preserve" index="yes">
		<manifest>
			<attribute name="Specification-Title" value="Xendra"/>
			<attribute name="Specification-Version" value="${env.XENDRA_VERSION}"/>
			<attribute name="Specification-Vendor" value="Xendra"/>
			<attribute name="Implementation-Title" value="Xendra ${env.XENDRA_VERSION}"/>
			<attribute name="Implementation-Version" value="${env.XENDRA_VERSION} ${DSTAMP}-${TSTAMP}"/>
			<attribute name="Implementation-Vendor" value="${env.XENDRA_VENDOR}"/>
			<attribute name="Implementation-URL" value="http://www.xendra.org"/>
		</manifest>
	</jar>
	<copy file="src/org/xendra/inventory/plugin/plugin.xml" todir="."/>
	<replace file="./plugin.xml">
		<replacefilter token="@timestamp@" value="${timestamp}"/>
	</replace>
	<zip destfile="${dist.dir}/${jar.name}.zip">
		<zipfileset dir="${plugin_id}" prefix="${plugin_id}">
			<include name="inventory.jar"/>
		</zipfileset>
		<zipfileset dir="." includes="plugin.xml" prefix="${plugin_id}"/>
		<zipfileset dir="src/org/xendra/messages" includes="*.xml" prefix="${plugin_id}/messageformat"/>
		<zipfileset dir="src/org/xendra/rules" includes="*.xml" prefix="${plugin_id}/rules"/>
	</zip>
</target>
<target name="catalog" depends="clientDistribute" unless="jar.uptodate">
  <java fork="true" classname="org.xendra.developer.GenerateCatalog">
   <arg value="."/>
   <arg value="./plugin.xml"/>
   <classpath refid="project.class.path"/>
   <classpath>
	   <pathelement location="${plugin_id}/${jar.name}.jar"/>
   </classpath>
   </java>
   <delete file="./plugin.xml"/>
</target>
<target name="clean">
	<!-- Delete the ${build.dir} directory trees -->
	<delete dir="${build.dir}"/>
	<delete file="${dist.dir}/${jar.name}.zip" failonerror="false"/>
</target>
</project>
