// created on: 16/05/2016
// modified on : 19/08/2016
// by xapiens
// pkg start with init
package org.xendra.pos.rules

import org.compiere.model.MOrder
import org.compiere.model.MPOS
import org.compiere.model.MAttributeSet
import org.compiere.model.MUOM
import org.compiere.model.MUOMConversion
import org.compiere.model.MPriceList
import org.compiere.model.MProductPricing
import org.compiere.model.MProductBOM
import org.compiere.model.MRole
import org.compiere.model.MStorage
import org.compiere.model.Tax
import org.compiere.model.MUser
import org.compiere.model.MBPartner
import org.xendra.pos.Row
import org.xendra.pos.RowData
import org.xendra.pos.PosPanel
import org.xendra.pos.cardcomponent.PayPanel
import java.sql.Timestamp
import org.xendra.pos.rules.model.PolicyRequest
import org.compiere.util.Env
import org.compiere.util.Util
import java.util.Properties
import java.math.BigDecimal
import org.compiere.model.reference.REF_C_OrderDeliveryRule
import org.xendra.rules.model.PaymentType
import org.compiere.util.DB;

//import accumulate org.xendra.utils.BigDecimalSumAccumulateFunction sumbd
global Properties ctx
dialect "mvel"

rule "val1"
	agenda-group "evaluation"
	dialect "mvel"
	when
	  PosPanel ( $paypanel : getPayPanel() )
		eval($paypanel.setPartner())
		eval($paypanel.setDocNumber())
	then
	  kcontext.getKnowledgeRuntime().getAgenda().getAgendaGroup( "payment" ).setFocus();
end

rule "val2"
	agenda-group "payment"
	dialect "mvel"
	when
	 PosPanel ( $paypanel : getPayPanel() )
	 $paymenttype : PaymentType()
	 eval($paymenttype.isCreditCard())
	then
	 $paypanel.setCard()
end

rule "val3"
	agenda-group "payment"
	dialect "mvel"
	when
	 PosPanel ( $paypanel : getPayPanel() )
	 //eval($paypanel.isCredit())
	 $paymenttype : PaymentType()
	 eval($paymenttype.isCredit())
	then
	 $paypanel.setCredit()
end

rule "val4"
	agenda-group "payment"
	dialect "mvel"
	when
	 PosPanel ( $paypanel : getPayPanel() )
	 $paymenttype : PaymentType()
	 eval($paymenttype.isCoupon())
	then
	 $paypanel.setCoupon()
end

rule "val5"
	agenda-group "payment"
	dialect "mvel"
	when
	 PosPanel ( $paypanel : getPayPanel() )
	 $paymenttype : PaymentType()
	 eval($paymenttype.isCash())
	then
	 $paypanel.setCash()
end

rule "Defaults"
	agenda-group "init"
	auto-focus true
	dialect "mvel"
	when
		 $panel : PosPanel( )	
		 MPOS ( $deliveryrule : DeliveryRule == null )
		 PosPanel ( $error : error == "" )	 
	then
		 modify ($panel) { setError("no deliveryrule") }
end	  

rule "Defaults2"
	agenda-group "init"
	auto-focus true
	dialect "mvel"
	when
		 $panel : PosPanel( )	
		 MPOS ( $machineserial : MachineSerial == null )
		 PosPanel ( $error : error == "" )	 
	then
		 modify ($panel) { setError("no machineserial") }
end	  

//rule "Defaults3"
//	agenda-group "init"
//	auto-focus true
//	dialect "mvel"
//	when
// 		 MPOS ( $deliveryrule : DeliveryRule != null )
//		 MPOS ( $machineserial : MachineSerial != null )
//	then
//	  kcontext.getKnowledgeRuntime().getAgenda().getAgendaGroup( "order" ).setFocus();
//end	  


rule "order"
	agenda-group "order"
	dialect "mvel"
	when 
		 $order : MOrder( M_Warehouse_ID == 0 )	
		 $config : MPOS()
	then
	  modify( $order ) { 
	  									 setDeliveryRule($config.getDeliveryRule()),
	  									 setClientOrg( $config.getAD_Client_ID(), $config.getAD_Org_ID()),
	  									 setM_Warehouse_ID($config.getM_Warehouse_ID()),
	  									 setIdentifier(Util.getUUID())
	  								  }	  	  
	 // PolicyRequest.getInstance().setOrder($order);
//	  kcontext.getKnowledgeRuntime().getAgenda().getAgendaGroup( "partner" ).setFocus();
end	

rule "partner"
	agenda-group "partner"
	dialect "mvel"
	when 
		$order : MOrder( $orderpartner : C_BPartner_ID )
		$partner : MBPartner( C_BPartner_ID != $orderpartner )					
	then
	  PolicyRequest.getInstance().PartnerToOrder($order, $partner); 		
	  kcontext.getKnowledgeRuntime().getAgenda().getAgendaGroup( "partnerrows" ).setFocus();
end 

rule "partnerrows"
	agenda-group "partnerrows"
	dialect "mvel"
	when 
		$row : Row( $rowpartner : getC_BPartner_ID() )
		$partner : MBPartner( C_BPartner_ID != $rowpartner )					
	then
	  taxfunc($row,$partner);  	
end 

rule "user"
	agenda-group "user"
	dialect "mvel"
	when
		$order : MOrder( $orderuser : AD_User_ID )
		$user : MUser( AD_User_ID != $orderuser )
	then
		PolicyRequest.getInstance().UserToOrder($order, $user);
end

rule "QtyOrdered"
	 agenda-group "row"
	 dialect "mvel"
	 when
	 	$row : Row( getFieldName() == "QtyOrdered" )
	  eval(qty($row))
	  eval(amt($row))
	 then
	 $row.getRowData().setQtyOrdered( $row.getFieldValue() );
	 System.out.println("QtyOrdered rule");
	 kcontext.getKnowledgeRuntime().getAgenda().getAgendaGroup( "total" ).setFocus();
end

rule "QtyEntered"
	 agenda-group "row"
	 dialect "mvel"
	 when
	 	$row : Row( getFieldName() == "QtyEntered" )
	 	eval(canQtyEntered($row))
	  //eval(qty($row))
	  //eval(amt($row))
	 then
	  //$row.getRowData().setQtyEntered( $row.getFieldValue() );
	  setQtyEntered($row);
	  totalrow($row);
	  System.out.println("QtyEntered->"+$row.getFieldValue());
  	 kcontext.getKnowledgeRuntime().getAgenda().getAgendaGroup( "total" ).setFocus();
end

rule "M_Product_ID"
	 agenda-group "row"
	 dialect "mvel"
	 when
 	  $partner : MBPartner( )					
	 	$row : Row( getFieldName() == "M_Product_ID" )	 	
	 then
	   $row.getRowData().setM_Product_ID( $row.getFieldIntValue() );
	   product($row, $partner);
	   //createAttribute($row);
	   System.out.println("M_Product_ID rule ");
  	 kcontext.getKnowledgeRuntime().getAgenda().getAgendaGroup( "total" ).setFocus();
end

rule "M_AttributeSetInstance_ID"
	 agenda-group "row"
	 dialect "mvel"
	 when
	 	$row : Row( getFieldName() == "M_AttributeSetInstance_ID" )	 	
	 then
	   $row.getRowData().setM_AttributeSetInstance_ID( $row.getFieldIntValue() );
end

rule "PriceActual"
	 agenda-group "row"
	 dialect "mvel"
	 when
	 	$row : Row( getFieldName() == "PriceActual" )
	 	eval(amt($row))
	 then
		$row.getRowData().setPriceActual( $row.getFieldValue() );
		System.out.println("PriceActual rule");
	  kcontext.getKnowledgeRuntime().getAgenda().getAgendaGroup( "total" ).setFocus();
end 

rule "PriceEntered"
	 agenda-group "row"
	 dialect "mvel"
	 when
	 	$row : Row( getFieldName() == "PriceEntered" )
	 	eval(amt($row))
	 then
	  $row.getRowData().setPriceEntered( $row.getFieldValue() ); 
	  System.out.println("PriceEntered rule");
    kcontext.getKnowledgeRuntime().getAgenda().getAgendaGroup( "total" ).setFocus();
end

rule "Discount"
	 agenda-group "row"
	 dialect "mvel"
	 when
	 	$row : Row( getFieldName() == "Discount" )
	 then
		 amt($row);
end

rule "Discount1"
	 agenda-group "row"
	 dialect "mvel"
	 when
	 	$row : Row( getFieldName() == "Discount1" )
	 then
	   amt($row);
end

rule "Discount2"
	 agenda-group "row"
	 dialect "mvel"
	 when
	 	$row : Row( getFieldName() == "Discount2" )
	 then
	   amt($row);
end

rule "Discount3"
	 agenda-group "row"
	 dialect "mvel"
	 when
	 	$row : Row( getFieldName() == "Discount3" )
	 then
	   amt($row);
end

rule "Discount4"
	 agenda-group "row"
	 dialect "mvel"
	 when
	 	$row : Row( getFieldName() == "Discount4" )
	 then
	   amt($row);
end

rule "C_UOM_ID"
	agenda-group "row"
	dialect "mvel"
	when 
	$row : Row ( getFieldName() == "C_UOM_ID" )
	eval(setC_UOM_ID($row))
	//eval(amt($row))
	//eval(qty($row))
	then
	$row.getRowData().setC_UOM_ID( $row.getFieldIntValue() ); 
	totalrow($row);
	System.out.println("C_UOM_ID");
  kcontext.getKnowledgeRuntime().getAgenda().getAgendaGroup( "total" ).setFocus();
end

//rule "total" 
//	no-loop
//	agenda-group "total"
//	dialect "mvel"
//	when
//	  $order : MOrder()
//	  total : BigDecimal()  from accumulate( Row($price : getTotal()), sumbd( $price) )
//	then
//		//$row.setIsChanged(false)
//	  modify( $order ) {grossTotal = total}
//	  System.out.print("rule total ")
//	  System.out.println(total)
//
//end

function void createAttribute(Row row) {
	if (row.getRowData().getM_AttributeSetInstance_ID() == 0) {
		Integer new_AttributeSetInstance_ID = DB.getSQLValue(null, "SELECT * FROM getancientattributesetinstance(?, ?, ?, ?)", 
			row.getRowData().getM_Warehouse_ID(), 
			row.getRowData().getM_Product_ID(), 
			row.getRowData().getQtyOrdered(), 
			Env.getAD_Org_ID(Env.getCtx()));
			if (new_AttributeSetInstance_ID > 0 )
			{
				row.getRowData().setM_AttributeSetInstance_ID(new_AttributeSetInstance_ID);				
			}			
	}
}
function boolean product(Row row, MBPartner partner) {
	  System.out.println("product");
		BigDecimal Qty = row.getRowData().getQtyOrdered();
		/** PLV is only accurate if PL selected in header */
		MProductPricing pp = new MProductPricing (row.getRowData().getM_Product_ID(), row.getRowData().getC_BPartner_ID(), Qty, row.getRowData().isIsSOTrx());
		pp.setM_PriceList_ID(row.getRowData().getM_PriceList_ID());
		pp.setM_PriceList_Version_ID(row.getRowData().getM_PriceListVersion_ID());
		pp.setPriceDate(row.getDateOrdered());
		//		
		row.getRowData().setPriceList(pp.getPriceList());
		row.getRowData().setPriceLimit(pp.getPriceLimit());
		row.getRowData().setPriceActual(pp.getPriceStd());
		row.getRowData().setPriceEntered(pp.getPriceStd());
		row.getRowData().setPriceBase(pp.getPriceStd());
		row.getRowData().setC_Currency_ID(pp.getC_Currency_ID());
		row.getRowData().setDiscount(pp.getDiscount());
		System.out.println(" en function product C_UOM_ID -> "+pp.getC_UOM_ID());
		row.getRowData().setC_UOM_ID(pp.getC_UOM_ID());
		row.getRowData().setEnforcePriceLimit(pp.isEnforcePriceLimit());
		row.getRowData().setIsReadOnlyPriceList(pp.isReadOnly());		
		//boms = MProductBOM.getBOMLines (m_Product);
		row.setBOMLines( MProductBOM.getBOMLines(Env.getCtx(), row.getM_Product_ID(), null));
		row.getRowData().setInvoicePrintDetails(row.getProduct().isInvoicePrintDetails());		
		row.getRowData().setmProductBrand(row.getProduct().getBrand());
		row.getRowData().setmProductBrandValue(row.getProduct().getBrandValue());
		row.getRowData().setC_TaxCategory_ID(row.getProduct().getC_TaxCategory_ID());
		row.setIsStocked(row.getProduct().isStocked());
		row.getRowData().setM_AttributeSet_ID(row.getProduct().getM_AttributeSet_ID());

		if (row.getRowData().getM_AttributeSet_ID() != 0) {
			MAttributeSet mas = MAttributeSet.get(Env.getCtx(),	row.getRowData().getM_AttributeSet_ID());
			if (mas != null	&& mas.isMandatory())  {
				row.getRowData().setIsAttributeMandatory(true);
			}
		}
		//
		taxfunc(row, partner);
	  return true;
}


	function boolean taxfunc(Row row, MBPartner partner)
	{
	  System.out.println("taxfunc");
		if (row.getM_Product_ID() == 0)
		{
		  System.out.println("Product_ID == 0");
			return false;		//
		}
		//	Check Partner Location
		if (partner.getBillLocation() == null) {
			System.out.println("no tiene direccion de facturacion");
			return false;
		}
	  if (partner.getShipLocation() == null) {
	    System.out.println("no tiene direccion de entrega");
	    return false;
	  }
	  int C_Tax_ID = Tax.get (Env.getCtx(), (int) row.getM_Product_ID(), 0, row.getRowData().getDateOrdered(), row.getRowData().getDatePromised(),
				Env.getAD_Org_ID(Env.getCtx()), (int) row.getRowData().getM_Warehouse_ID(), partner.getBillLocation().getC_BPartner_Location_ID(), partner.getShipLocation().getC_BPartner_Location_ID(),	true);
		row.setC_Tax_ID(new Integer(C_Tax_ID));
		return true;
		//return amt(name , value);
	}	//	tax


function boolean amt(Row row) {
	  System.out.println("function amt ejecutada :D");
		BigDecimal oPriceActual 	= row.getRowData().getPriceActual();
		BigDecimal oPriceEntered 	= row.getRowData().getPriceEntered();
		BigDecimal oPriceList 		= row.getRowData().getPriceList();
		BigDecimal oDiscount 		=   row.getRowData().getDiscount();		
		Boolean ResetPriceList = false;
		if (row.getFieldName().equals("QtyOrdered") || row.getFieldName().equals("QtyEntered")	|| row.getFieldName().equals("M_Product_ID"))
		{
			if (row.getFieldName().equals("QtyEntered"))
				row.getRowData().setQtyOrdered(MUOMConversion.convertProductFrom (Env.getCtx(), row.getRowData().getM_Product_ID(),row.getRowData().getC_UOM_ID(), row.getRowData().getQtyEntered()));
			if (row.getRowData().getQtyOrdered() == null)
				row.getRowData().setQtyOrdered(row.getRowData().getQtyEntered());

			MProductPricing pp = new MProductPricing (row.getRowData().getM_Product_ID(), row.getRowData().getC_BPartner_ID(), row.getRowData().getQtyOrdered(), true);
			pp.setM_PriceList_ID(row.getRowData().getM_PriceList_ID());
			pp.setM_PriceList_Version_ID(row.getRowData().getM_PriceListVersion_ID());
			Timestamp date = row.getDateOrdered();
			pp.setPriceDate(date);
			//
			row.getRowData().setPriceEntered( MUOMConversion.convertProductFrom (Env.getCtx(), row.getRowData().getM_Product_ID(), 
					row.getRowData().getC_UOM_ID(), pp.getPriceStd()));
			if (row.getRowData().getPriceEntered() == null)
				row.getRowData().setPriceEntered(pp.getPriceStd());
			row.getRowData().setPriceEntered(row.getRowData().getPriceEntered().setScale(row.getRowData().getStdPrecision(), BigDecimal.ROUND_HALF_UP));
			row.getRowData().setPriceActual(pp.getPriceStd());
			row.getRowData().setDiscount(pp.getDiscount());
		}
		else if (row.getFieldName().equals("PriceActual"))
		{
			row.getRowData().setPriceActual((BigDecimal) row.getFieldValue());
			row.getRowData().setPriceEntered(MUOMConversion.convertProductFrom (Env.getCtx(), row.getRowData().getM_Product_ID(), row.getRowData().getC_UOM_ID(), row.getRowData().getPriceActual()));
			if (row.getRowData().getPriceEntered() == null)
				row.getRowData().setPriceEntered(row.getRowData().getPriceActual());
		}
		else if (row.getFieldName().equals("PriceEntered"))
		{
			row.getRowData().setPriceEntered( (BigDecimal) row.getFieldValue());
			row.getRowData().setPriceActual( MUOMConversion.convertProductTo (Env.getCtx(), row.getRowData().getM_Product_ID(), row.getRowData().getC_UOM_ID(), row.getRowData().getPriceEntered()));
			row.getRowData().setDiscount(BigDecimal.ZERO);
			row.getRowData().setDiscount1(BigDecimal.ZERO);
			row.getRowData().setDiscount2(BigDecimal.ZERO);
			row.getRowData().setDiscount3(BigDecimal.ZERO);
			row.getRowData().setDiscount4(BigDecimal.ZERO);
			if (row.getRowData().getPriceActual() == null)
				row.getRowData().setPriceActual(row.getRowData().getPriceEntered());
			
			if ((row.getRowData().getPriceList().compareTo(Env.ZERO) > 0 || row.getRowData().getPriceEntered().compareTo(Env.ZERO) > 0) && 
					row.getRowData().getDiscount().equals(Env.ZERO) && 
					row.getRowData().getDiscount1().equals(Env.ZERO) && 
					row.getRowData().getDiscount2().equals(Env.ZERO) &&
					row.getRowData().getDiscount3().equals(Env.ZERO) &&
					row.getRowData().getDiscount4().equals(Env.ZERO))
			{
				if (row.getRowData().getPriceList().compareTo(Env.ZERO) > 0)
				{
					row.getRowData().setDiscount(new BigDecimal ((row.getRowData().getPriceList().doubleValue() - row.getRowData().getPriceActual().doubleValue()) / row.getRowData().getPriceList().doubleValue() * 100.0));				
					row.getRowData().setDiscountAmt(new BigDecimal ((100.0 - row.getRowData().getDiscount().doubleValue()) / 100.0 * row.getRowData().getPriceList().doubleValue()));
				}
				else
				{
					row.getRowData().setPriceList(row.getRowData().getPriceActual());
				}
			}						
		}
		//  Discount entered - Calculate Actual/Entered
		int StdPrecision = MPriceList.getStandardPrecision(Env.getCtx(), row.getRowData().getM_PriceList_ID()); // jala la precision de la moneda
		int PricePrecision = MPriceList.getPricePrecision(Env.getCtx(), row.getRowData().getM_PriceList_ID());

		if (row.getFieldName().equals("Discount"))
		{
			row.getRowData().setDiscount((BigDecimal) row.getFieldValue());
			if (row.getRowData().getDiscount() == null)
				row.getRowData().setDiscount(Env.ZERO);
			if (row.getRowData().getDiscount().compareTo(Env.ZERO) == 0)
				row.getRowData().setDiscountAmt(Env.ZERO);
		}
		if (row.getFieldName().equals("Discount1"))
		{
			row.getRowData().setDiscount1((BigDecimal) row.getFieldValue());
			if (row.getRowData().getDiscount1() == null)
				row.getRowData().setDiscount1(Env.ZERO);
			if (row.getRowData().getDiscount1().compareTo(Env.ZERO) == 0)
				row.getRowData().setDiscount1Amt(Env.ZERO);
		}
		else if (row.getFieldName().equals("Discount2"))
		{
			row.getRowData().setDiscount2((BigDecimal) row.getFieldValue());
			if (row.getRowData().getDiscount2() == null)
				row.getRowData().setDiscount2(Env.ZERO);
			if (row.getRowData().getDiscount2().compareTo(Env.ZERO) == 0)
				row.getRowData().setDiscount2Amt(Env.ZERO);			 
		}
		else if (row.getFieldName().equals("Discount3"))
		{
			row.getRowData().setDiscount3((BigDecimal) row.getFieldValue());
			if (row.getRowData().getDiscount3() == null)
				row.getRowData().setDiscount3(Env.ZERO);
			if (row.getRowData().getDiscount3().compareTo(Env.ZERO) == 0)
				row.getRowData().setDiscount3Amt(Env.ZERO);			 
		}
		else if (row.getFieldName().equals("Discount4"))
		{
			row.getRowData().setDiscount4((BigDecimal) row.getFieldValue());
			if (row.getRowData().getDiscount4() == null)
				row.getRowData().setDiscount4(Env.ZERO);
			if (row.getRowData().getDiscount4().compareTo(Env.ZERO) == 0)
				row.getRowData().setDiscount4Amt(Env.ZERO);			 
		}		 
		BigDecimal PriceList1 = row.getRowData().getPriceList();

		if (row.getRowData().getDiscount().compareTo(Env.ZERO) != 0)
		{
			row.getRowData().setDiscountAmt(new BigDecimal ((100.0 - row.getRowData().getDiscount().doubleValue()) / 100.0 * PriceList1.doubleValue()));		 
			PriceList1 = row.getRowData().getDiscountAmt();
			if (row.getRowData().getDiscount().scale() > 2)				
				row.getRowData().setDiscount(row.getRowData().getDiscount().setScale(2, BigDecimal.ROUND_HALF_UP));			
		}
				
		if (row.getRowData().getDiscount1().compareTo(Env.ZERO) != 0)
		{
			row.getRowData().setDiscount1Amt(new BigDecimal ((100.0 - row.getRowData().getDiscount1().doubleValue()) / 100.0 * PriceList1.doubleValue()));			
			PriceList1 = row.getRowData().getDiscount1Amt();
		}

		if (row.getRowData().getDiscount2().compareTo(Env.ZERO) != 0)
		{
			row.getRowData().setDiscount2Amt(new BigDecimal ((100.0 - row.getRowData().getDiscount2().doubleValue()) / 100.0 * PriceList1.doubleValue()));		 
			PriceList1 = row.getRowData().getDiscount2Amt();
		}

		if (row.getRowData().getDiscount3().compareTo(Env.ZERO) != 0)
		{
			row.getRowData().setDiscount3Amt(new BigDecimal ((100.0 - row.getRowData().getDiscount3().doubleValue()) / 100.0 * PriceList1.doubleValue()));		 
			PriceList1 = row.getRowData().getDiscount3Amt();
		}

		if (row.getRowData().getDiscount4().compareTo(Env.ZERO) != 0)
		{
			row.getRowData().setDiscount4Amt(new BigDecimal ((100.0 - row.getRowData().getDiscount4().doubleValue()) / 100.0 * PriceList1.doubleValue()));		 
			PriceList1 = row.getRowData().getDiscount4Amt();
		}
		
		row.getRowData().setPriceActual( PriceList1.setScale(PricePrecision, BigDecimal.ROUND_HALF_UP));
		
		row.getRowData().setPriceEntered(MUOMConversion.convertProductFrom (Env.getCtx(), row.getRowData().getM_Product_ID(), row.getRowData().getC_UOM_ID(), row.getRowData().getPriceActual()));
		
		if (row.getRowData().getPriceEntered() == null)
			row.getRowData().setPriceEntered(row.getRowData().getPriceActual());
		else
			row.getRowData().setPriceEntered(row.getRowData().getPriceEntered().setScale(PricePrecision, BigDecimal.ROUND_HALF_UP));
		
		//	Check PriceLimit
		if (!CheckPriceLimit(row))
		{
			row.getRowData().setPriceActual(oPriceActual);
			row.getRowData().setPriceEntered(oPriceEntered);
			row.getRowData().setPriceList(oPriceList);
			row.getRowData().setDiscount(oDiscount);
			if (row.getFieldName().equals("Discount4"))
			{
				row.getRowData().setDiscount4(Env.ZERO);
				row.getRowData().setDiscount4Amt(Env.ZERO);
			}
			return false;
		}
				
		if (ResetPriceList)
			row.getRowData().setPriceList(Env.ZERO);
		
		return true;
}
function void totalrow(Row row) {
		int StdPrecision = MPriceList.getStandardPrecision(Env.getCtx(), row.getRowData().getM_PriceList_ID()); // jala la precision de la moneda
		row.getRowData().setGross(row.getRowData().getPriceList().multiply(row.getRowData().getQtyOrdered()).setScale(StdPrecision, BigDecimal.ROUND_HALF_UP));
		row.getRowData().setTotal(row.getRowData().getPriceActual().multiply(row.getRowData().getQtyOrdered()).setScale(StdPrecision, BigDecimal.ROUND_HALF_UP));
}

function boolean canQtyEntered(Row row) {
	// qty
			int C_UOM_To_ID = row.getRowData().getC_UOM_ID(); 			
			MUOM uom = MUOM.get(Env.getCtx(), row.getRowData().getC_UOM_ID());
			if (row.getFieldValue().remainder(BigDecimal.ONE).compareTo(BigDecimal.ZERO) > 0 && !uom.isSplit())
			{
				row.setM_processMsg("Producto no acepta fraccion");
				return false;
			}
			return true;
}

function void setQtyEntered(Row row)
{
			int C_UOM_To_ID = row.getRowData().getC_UOM_ID(); 			
			MUOM uom = MUOM.get(Env.getCtx(), row.getRowData().getC_UOM_ID());
			row.getRowData().setQtyEntered(row.getFieldValue());
			//BigDecimal QtyEntered1 = QtyEntered.setScale(MUOM.getPrecision(Env.getCtx(), C_UOM_To_ID), BigDecimal.ROUND_HALF_UP);
			BigDecimal QtyEntered1 = row.getRowData().getQtyEntered().setScale(uom.getStdPrecision(), BigDecimal.ROUND_HALF_UP);
			if (row.getRowData().getQtyEntered().compareTo(QtyEntered1) != 0)
			{
				row.getRowData().setQtyEntered(QtyEntered1);
			}
			row.getRowData().setQtyOrdered(MUOMConversion.convertProductFrom (Env.getCtx(), row.getRowData().getM_Product_ID(),	C_UOM_To_ID, row.getRowData().getQtyEntered()));
			if (row.getRowData().getQtyOrdered() == null)
				row.getRowData().setQtyOrdered(row.getRowData().getQtyEntered());
			boolean conversion = row.getRowData().getQtyEntered().compareTo(row.getRowData().getQtyOrdered()) != 0;
			row.getRowData().setUOMConversion(conversion ? "Y" : "N");	
	// amt
		//if (row.getFieldName().equals("QtyEntered"))
			row.getRowData().setQtyOrdered(MUOMConversion.convertProductFrom (Env.getCtx(), row.getRowData().getM_Product_ID(),row.getRowData().getC_UOM_ID(), row.getRowData().getQtyEntered()));
		if (row.getRowData().getQtyOrdered() == null)
			row.getRowData().setQtyOrdered(row.getRowData().getQtyEntered());

		MProductPricing pp = new MProductPricing (row.getRowData().getM_Product_ID(), row.getRowData().getC_BPartner_ID(), row.getRowData().getQtyOrdered(), true);
		pp.setM_PriceList_ID(row.getRowData().getM_PriceList_ID());
		pp.setM_PriceList_Version_ID(row.getRowData().getM_PriceListVersion_ID());
		Timestamp date = row.getDateOrdered();
		pp.setPriceDate(date);
		//
		row.getRowData().setPriceEntered( MUOMConversion.convertProductFrom (Env.getCtx(), row.getRowData().getM_Product_ID(), 
				row.getRowData().getC_UOM_ID(), pp.getPriceStd()));
		if (row.getRowData().getPriceEntered() == null)
			row.getRowData().setPriceEntered(pp.getPriceStd());
		row.getRowData().setPriceEntered(row.getRowData().getPriceEntered().setScale(row.getRowData().getStdPrecision(), BigDecimal.ROUND_HALF_UP));
		row.getRowData().setPriceActual(pp.getPriceStd());
		row.getRowData().setDiscount(pp.getDiscount());	
}

function boolean setC_UOM_ID(Row row) {
			int C_UOM_To_ID = row.getFieldIntValue();
			BigDecimal QtyEntered1 = row.getRowData().getQtyEntered().setScale(MUOM.getPrecision(Env.getCtx(), C_UOM_To_ID), BigDecimal.ROUND_HALF_UP);
			if (row.getRowData().getQtyEntered().compareTo(QtyEntered1) != 0)
			{
				row.getRowData().setQtyEntered(QtyEntered1);
			}
			row.getRowData().setQtyOrdered(MUOMConversion.convertProductFrom (Env.getCtx(), row.getRowData().getM_Product_ID(), C_UOM_To_ID, row.getRowData().getQtyEntered()));
			if (row.getRowData().getQtyOrdered() == null)
				row.getRowData().setQtyOrdered(row.getRowData().getQtyEntered());
			boolean conversion = row.getRowData().getQtyEntered().compareTo(row.getRowData().getQtyOrdered()) != 0;
			row.getRowData().setPriceEntered(MUOMConversion.convertProductFrom (Env.getCtx(), row.getRowData().getM_Product_ID(), C_UOM_To_ID, row.getRowData().getPriceActual()));
			if (row.getRowData().getPriceEntered() == null)
				row.getRowData().setPriceEntered(row.getRowData().getPriceActual()); 
			row.getRowData().setUOMConversion(conversion ? "Y" : "N");	
		if (!row.getRowData().getIsStocked())
			 return true;		
		return checkAvailable(row);			
}

function boolean qty(Row row) {
	  System.out.println("function qty ejecutada :D");
		if ( row.getM_Product_ID() == 0)
			return true;
		else if (row.getFieldName() == "C_UOM_ID")
		{
		}
		//	QtyEntered changed - calculate QtyOrdered
		else if (row.getFieldName() == "QtyEntered")
		{
		}
		else if (row.getFieldName() == "QtyOrdered")
		{
			int c_UOM_From_ID = row.getRowData().getC_UOM_ID();
			row.getRowData().setQtyOrdered(row.getFieldValue());
			row.getRowData().setQtyEntered(MUOMConversion.convertProductFrom(Env.getCtx(), row.getRowData().getM_Product_ID(),	c_UOM_From_ID, row.getRowData().getQtyOrdered()));
			if (row.getRowData().getQtyEntered() == null)
				row.getRowData().setQtyEntered(row.getRowData().getQtyOrdered());
			boolean conversion = row.getRowData().getQtyOrdered().compareTo(row.getRowData().getQtyEntered()) != 0;
			row.getRowData().setUOMConversion(conversion ? "Y" : "N");	
		}
		if (!row.getRowData().getIsStocked())
			 return true;
		
		return checkAvailable(row);
}

function boolean checkAvailable(Row row) {
	  System.out.println("CheckAvailable");
		if (row.isVoidTransaction())
			return true;
		if (row.getRowData().getM_DeliveryRule().equals(REF_C_OrderDeliveryRule.Force))
			return true;
		BigDecimal available = MStorage.getQtyAvailable(row.getRowData().getM_Warehouse_ID(),
								0,
								row.getRowData().getM_Product_ID().intValue(),
								row.getRowData().getM_AttributeSetInstance_ID(),
								row.getRowData().getRef_AttributeSetInstance_ID(), null);
		if (available == null)
			available = BigDecimal.ZERO;
		if (available.signum() == 0)
		{
		  row.setM_processMsg("NoQtyAvailable");
		  row.setQtyLostSales(row.getRowData().getQtyOrdered());
		  return false;
		}
		else if (available.compareTo(row.getRowData().getQtyOrdered()) < 0)
		{
			row.setM_processMsg("InsufficientQtyAvailable");
			row.setQtyLostSales(row.getRowData().getQtyOrdered());
			return false;
		}
		return true;
}

function boolean CheckPriceLimit(Row row) {
  System.out.println("CheckPriceLimit");
	boolean enforce = row.getRowData().isIsSOTrx() && row.getRowData().getEnforcePriceLimit();
	if (enforce && MRole.getDefault().isOverwritePriceLimit())
		enforce = false;
	//	Check Price Limit?
	if (enforce && row.getRowData().getPriceLimit().doubleValue() != 0.0
			&& row.getRowData().getPriceActual().compareTo(row.getRowData().getPriceLimit()) < 0)
	{
		row.getRowData().setPriceActual(row.getRowData().getPriceLimit());
		row.getRowData().setPriceEntered( MUOMConversion.convertProductFrom (Env.getCtx(), row.getRowData().getM_Product_ID(), row.getRowData().getC_UOM_ID(), row.getRowData().getPriceLimit()));
		if (row.getRowData().getPriceEntered() == null)
			row.getRowData().setPriceEntered(row.getRowData().getPriceLimit());
		row.setM_processMsg("UnderLimitPrice");
		row.getRowData().setPriceActual(row.getRowData().getPriceLimit());
		try {
			row.getRowData().setDiscount( new BigDecimal ((row.getRowData().getPriceList().doubleValue() - row.getRowData().getPriceActual().doubleValue()) / row.getRowData().getPriceList().doubleValue() * 100.0));
			if (row.getRowData().getDiscount().scale() > 2)				
				row.getRowData().setDiscount(row.getRowData().getDiscount().setScale(2, BigDecimal.ROUND_HALF_UP));
		}
		catch (NumberFormatException e) {
			row.getRowData().setDiscount(Env.ZERO);
		}			
		return false;
	}
	return true;
}