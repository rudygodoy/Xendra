//created on: 07-abr-2017
//modified on : 09-abr-2018
// author : xapiens
package org.xendra.rules
// HEADER
import org.compiere.model.GridTab
import org.compiere.model.GridField

import org.compiere.model.MInvoice
import org.compiere.model.MTax
import org.compiere.model.MProduct
import org.compiere.model.MOrder
import org.compiere.model.MOrderLine
import org.compiere.model.MUOM
import org.compiere.model.MLocator
import org.compiere.model.MUOMConversion
import org.compiere.model.reference.REF_C_DocTypeDocBaseType;
import org.compiere.model.reference.REF_M_TransactionMovementType;
import java.util.Properties
import java.math.BigDecimal
import org.compiere.util.Env
import java.sql.ResultSet	
import java.sql.SQLException
import java.sql.PreparedStatement
import java.sql.Timestamp
import org.compiere.util.DB
import org.compiere.util.DisplayType;

global Object value
global String result
global Object OldValue
global Properties ctx
global Integer WindowNo

rule dateacct
	agenda-group "dateacct"
	when
		$tab : GridTab()
		$field : GridField( $value : Value != null, getColumnName() == "MovementDate") 
	then
		$tab.setValue("DateAcct", value);
end

rule doctype
	agenda-group "doctype"
	when
		$tab : GridTab()
		$field : GridField( $value : Value != null, getColumnName() == "C_DocType_ID") 
	then
		updatedoctype(ctx, WindowNo, $tab, $field, value);
end

rule partner
	agenda-group "partner"
	when
		$tab : GridTab()
		$field : GridField( $value : Value != null, getColumnName() == "C_BPartner_ID")
	then
		updatepartner(ctx, WindowNo, $tab, $field, value);
end

rule warehouse
	agenda-group "warehouse"
	when
		$tab : GridTab()
		$field : GridField( $value : Value != null, getColumnName() == "M_Warehouse_ID")
	then
		updatewarehouse(ctx, WindowNo, $tab, $field, value);
end

rule order
	agenda-group "order"
	when
		$tab : GridTab()
		$field : GridField( $value : Value != null, getColumnName() == "C_Order_ID")
	then
		updateorder(ctx, WindowNo, $tab, $field, value);
end

rule product
	agenda-group "product"
	when
		$tab : GridTab()
		$field : GridField( $value : Value != null, getColumnName() == "M_Product_ID")
	then
		updateproduct(ctx, WindowNo, $tab, $field, value);
end

rule movementqty
	agenda-group "qty"
	when
		$tab : GridTab()
		$field : GridField( $value : Value != null, getColumnName() == "MovementQty")
	then
		updateqty(ctx, WindowNo, $tab, $field, value);
end

rule orderline
	agenda-group "orderline"
	when
		$tab : GridTab()
		$field : GridField( $value : Value != null, getColumnName() == "C_OrderLine_ID")
	then
		updateorderline(ctx, WindowNo, $tab, $field, value);
end

rule asi
	agenda-group "asi"
	when
		$tab : GridTab()
		$field : GridField( $value : Value != null, getColumnName() == "M_AttributeSetInstance_ID")
	then
		updateasi(ctx, WindowNo, $tab, $field, value);
end

rule qtyentered
	agenda-group "qty"
	when
		$tab : GridTab()
		$field : GridField( $value : Value != null, getColumnName() == "QtyEntered")
	then
		updateqty(ctx, WindowNo, $tab, $field, value);
end

function updateasi(Properties ctx, Integer WindowNo, GridTab mTab, GridField mField, Object value) {
	Integer M_ASI_ID = (Integer)value;
	//
	int M_Product_ID = Env.getContextAsInt(ctx, WindowNo, "M_Product_ID");
	int M_Warehouse_ID = Env.getContextAsInt(ctx, WindowNo, "M_Warehouse_ID");
	int M_Locator_ID = Env.getContextAsInt(ctx, WindowNo, "M_Locator_ID");
	//log.fine("M_Product_ID=" + M_Product_ID
	//	+ ", M_ASI_ID=" + M_ASI_ID
	//	+ " - M_Warehouse_ID=" + M_Warehouse_ID 
	//	+ ", M_Locator_ID=" + M_Locator_ID);
	//	Check Selection
	int M_AttributeSetInstance_ID =	Env.getContextAsInt(Env.getCtx(), Env.WINDOW_INFO, Env.TAB_INFO, "M_AttributeSetInstance_ID");
	if (M_ASI_ID.intValue() == M_AttributeSetInstance_ID)
	{
		int selectedM_Locator_ID = Env.getContextAsInt(Env.getCtx(), Env.WINDOW_INFO, Env.TAB_INFO, "M_Locator_ID");
		if (selectedM_Locator_ID != 0)
		{
			//log.fine("Selected M_Locator_ID=" + selectedM_Locator_ID);
			mTab.setValue("M_Locator_ID", new Integer (selectedM_Locator_ID));
		}
	}
}
function updateorderline(Properties ctx, Integer WindowNo, GridTab mTab, GridField mField, Object value) {
	Integer C_OrderLine_ID = (Integer)value;
	//	Get Details
	MOrderLine ol = new MOrderLine (ctx, C_OrderLine_ID.intValue(), null);
	if (ol.get_ID() != 0)
	{
		mTab.setValue("M_Product_ID", new Integer(ol.getM_Product_ID()));
		mTab.setValue("M_AttributeSetInstance_ID", new Integer(ol.getM_AttributeSetInstance_ID()));
		//
		mTab.setValue("C_UOM_ID", new Integer(ol.getC_UOM_ID()));
		BigDecimal MovementQty = ol.getQtyOrdered().subtract(ol.getQtyDelivered());
		mTab.setValue("MovementQty", MovementQty);
		BigDecimal QtyEntered = MovementQty;
		if (ol.getQtyEntered().compareTo(ol.getQtyOrdered()) != 0)
			QtyEntered = QtyEntered.multiply(ol.getQtyEntered())
				.divide(ol.getQtyOrdered(), 12, BigDecimal.ROUND_HALF_UP);
		mTab.setValue("QtyEntered", QtyEntered);
		//
		mTab.setValue("C_Activity_ID", new Integer(ol.getC_Activity_ID()));
		mTab.setValue("C_Campaign_ID", new Integer(ol.getC_Campaign_ID()));
		mTab.setValue("C_Project_ID", new Integer(ol.getC_Project_ID()));
		mTab.setValue("C_ProjectPhase_ID", new Integer(ol.getC_ProjectPhase_ID()));
		mTab.setValue("C_ProjectTask_ID", new Integer(ol.getC_ProjectTask_ID()));
		mTab.setValue("AD_OrgTrx_ID", new Integer(ol.getAD_OrgTrx_ID()));
		mTab.setValue("User1_ID", new Integer(ol.getUser1_ID()));
		mTab.setValue("User2_ID", new Integer(ol.getUser2_ID()));
	}
}

function updateqty(Properties ctx, Integer WindowNo, GridTab mTab, GridField mField, Object value) {
	int M_Product_ID = Env.getContextAsInt(ctx, WindowNo, "M_Product_ID");
	BigDecimal MovementQty, QtyEntered;		
	//	No Product
	if (M_Product_ID == 0)
	{
		QtyEntered = (BigDecimal)mTab.getValue("QtyEntered");
		mTab.setValue("MovementQty", QtyEntered);
	}
	//	UOM Changed - convert from Entered -> Product
	else if (mField.getColumnName().equals("C_UOM_ID"))
	{
		int C_UOM_To_ID = ((Integer)value).intValue();
		QtyEntered = (BigDecimal)mTab.getValue("QtyEntered");
		BigDecimal QtyEntered1 = QtyEntered.setScale(MUOM.getPrecision(ctx, C_UOM_To_ID), BigDecimal.ROUND_HALF_UP);
		if (QtyEntered.compareTo(QtyEntered1) != 0)
		{
			//log.fine("Corrected QtyEntered Scale UOM=" + C_UOM_To_ID + "; QtyEntered=" + QtyEntered + "->" + QtyEntered1);  
			QtyEntered = QtyEntered1;
			mTab.setValue("QtyEntered", QtyEntered);
		}
		MovementQty = MUOMConversion.convertProductFrom (ctx, M_Product_ID, 
			C_UOM_To_ID, QtyEntered);
		if (MovementQty == null)
			MovementQty = QtyEntered;
		boolean conversion = QtyEntered.compareTo(MovementQty) != 0;
		//log.fine("UOM=" + C_UOM_To_ID 
		//	+ ", QtyEntered=" + QtyEntered
		//	+ " -> " + conversion 
		//	+ " MovementQty=" + MovementQty);
		Env.setContext(ctx, WindowNo, "UOMConversion", conversion ? "Y" : "N");
		mTab.setValue("MovementQty", MovementQty);
	}
	//	No UOM defined
	else if (Env.getContextAsInt(ctx, WindowNo, "C_UOM_ID") == 0)
	{
		QtyEntered = (BigDecimal)mTab.getValue("QtyEntered");
		mTab.setValue("MovementQty", QtyEntered);
	}
	//	QtyEntered changed - calculate MovementQty
	else if (mField.getColumnName().equals("QtyEntered"))
	{
		int C_UOM_To_ID = Env.getContextAsInt(ctx, WindowNo, "C_UOM_ID");
		QtyEntered = (BigDecimal)value;
		BigDecimal QtyEntered1 = QtyEntered.setScale(MUOM.getPrecision(ctx, C_UOM_To_ID), BigDecimal.ROUND_HALF_UP);
		if (QtyEntered.compareTo(QtyEntered1) != 0)
		{
			//log.fine("Corrected QtyEntered Scale UOM=" + C_UOM_To_ID 
			//	+ "; QtyEntered=" + QtyEntered + "->" + QtyEntered1);  
			QtyEntered = QtyEntered1;
			mTab.setValue("QtyEntered", QtyEntered);
		}
		MovementQty = MUOMConversion.convertProductFrom (ctx, M_Product_ID, 
			C_UOM_To_ID, QtyEntered);
		if (MovementQty == null)
			MovementQty = QtyEntered;
		boolean conversion = QtyEntered.compareTo(MovementQty) != 0;
		//log.fine("UOM=" + C_UOM_To_ID 
		//	+ ", QtyEntered=" + QtyEntered
		//	+ " -> " + conversion 
		//	+ " MovementQty=" + MovementQty);
		Env.setContext(ctx, WindowNo, "UOMConversion", conversion ? "Y" : "N");
		mTab.setValue("MovementQty", MovementQty);
	}
	//	MovementQty changed - calculate QtyEntered (should not happen)
	else if (mField.getColumnName().equals("MovementQty"))
	{
		int C_UOM_To_ID = Env.getContextAsInt(ctx, WindowNo, "C_UOM_ID");
		MovementQty = (BigDecimal)value;
		int precision = MProduct.get(ctx, M_Product_ID,null).getUOMPrecision(); 
		BigDecimal MovementQty1 = MovementQty.setScale(precision, BigDecimal.ROUND_HALF_UP);
		if (MovementQty.compareTo(MovementQty1) != 0)
		{
			//log.fine("Corrected MovementQty " 
			//	+ MovementQty + "->" + MovementQty1);  
			MovementQty = MovementQty1;
			mTab.setValue("MovementQty", MovementQty);
		}
		QtyEntered = MUOMConversion.convertProductTo (ctx, M_Product_ID, 
			C_UOM_To_ID, MovementQty);
		if (QtyEntered == null)
			QtyEntered = MovementQty;
		boolean conversion = MovementQty.compareTo(QtyEntered) != 0;
		//log.fine("UOM=" + C_UOM_To_ID 
		//	+ ", MovementQty=" + MovementQty
		//	+ " -> " + conversion 
		//	+ " QtyEntered=" + QtyEntered);
		Env.setContext(ctx, WindowNo, "UOMConversion", conversion ? "Y" : "N");
		mTab.setValue("QtyEntered", QtyEntered);
	}
}

function updateproduct(Properties ctx, Integer WindowNo, GridTab mTab, GridField mField, Object value) {
	Integer M_Product_ID = (Integer)value;	
	//	Set Attribute & Locator
	int M_Locator_ID = 0;
	if (Env.getContextAsInt(ctx, Env.WINDOW_INFO, Env.TAB_INFO, "M_Product_ID") == M_Product_ID.intValue()
		&& Env.getContextAsInt(ctx, Env.WINDOW_INFO, Env.TAB_INFO, "M_AttributeSetInstance_ID") != 0)
	{
		mTab.setValue("M_AttributeSetInstance_ID", 
			new Integer(Env.getContextAsInt(ctx, Env.WINDOW_INFO, Env.TAB_INFO, "M_AttributeSetInstance_ID")));
		M_Locator_ID = Env.getContextAsInt(ctx, Env.WINDOW_INFO, Env.TAB_INFO, "M_Locator_ID");
		if (M_Locator_ID != 0)
			mTab.setValue("M_Locator_ID", new Integer(M_Locator_ID));
	}
	else
		mTab.setValue("M_AttributeSetInstance_ID", null);
	//
	int M_Warehouse_ID = Env.getContextAsInt(ctx, WindowNo, "M_Warehouse_ID");
	boolean IsSOTrx = "Y".equals(Env.getContext(ctx, WindowNo, "IsSOTrx"));
	if (IsSOTrx)
	{
		return;
	}
		//	Set UOM/Locator/Qty
	MProduct product = MProduct.get(ctx, M_Product_ID.intValue(),null);
	mTab.setValue("C_UOM_ID", new Integer (product.getC_UOM_ID()));
	BigDecimal QtyEntered = (BigDecimal)mTab.getValue("QtyEntered");
	mTab.setValue("MovementQty", QtyEntered);
	if (M_Locator_ID != 0)
		;		//	already set
	else if (product.getM_Locator_ID() != 0)
	{
		MLocator loc = MLocator.get(ctx, product.getM_Locator_ID());
		if (M_Warehouse_ID == loc.getM_Warehouse_ID())
			mTab.setValue("M_Locator_ID", new Integer (product.getM_Locator_ID()));
	}
}

function updateorder(Properties ctx, Integer WindowNo, GridTab mTab, GridField mField, Object value) {
	Integer C_Order_ID = (Integer)value;
	//	Get Details
	MOrder order = new MOrder (ctx, C_Order_ID.intValue(), null);
	if (order.get_ID() != 0)
	{
		mTab.setValue("DateOrdered", order.getDateOrdered());
		mTab.setValue("POReference", order.getPOReference());
		mTab.setValue("AD_Org_ID", new Integer(order.getAD_Org_ID()));
		mTab.setValue("AD_OrgTrx_ID", new Integer(order.getAD_OrgTrx_ID()));
		mTab.setValue("C_Activity_ID", new Integer(order.getC_Activity_ID()));
		mTab.setValue("C_Campaign_ID", new Integer(order.getC_Campaign_ID()));
		mTab.setValue("C_Project_ID", new Integer(order.getC_Project_ID()));
		mTab.setValue("User1_ID", new Integer(order.getUser1_ID()));
		mTab.setValue("User2_ID", new Integer(order.getUser2_ID()));
		mTab.setValue("M_Warehouse_ID", new Integer(order.getM_Warehouse_ID()));
		//
		mTab.setValue("DeliveryRule", order.getDeliveryRule());
		mTab.setValue("DeliveryViaRule", order.getDeliveryViaRule());
		mTab.setValue("M_Shipper_ID", new Integer(order.getM_Shipper_ID()));
		mTab.setValue("FreightCostRule", order.getFreightCostRule());
		mTab.setValue("FreightAmt", order.getFreightAmt());
		mTab.setValue("C_BPartner_ID", new Integer(order.getC_BPartner_ID()));
	}
}

function updatewarehouse(Properties ctx, Integer WindowNo, GridTab mTab, GridField mField, Object value) {
	Integer M_Warehouse_ID = (Integer)value;
	String sql = "SELECT w.AD_Org_ID, l.M_Locator_ID "
		+ "FROM M_Warehouse w"
		+ " LEFT OUTER JOIN M_Locator l ON (l.M_Warehouse_ID=w.M_Warehouse_ID AND l.IsDefault='Y') "
		+ "WHERE w.M_Warehouse_ID=?";		//	1
	try
	{
		PreparedStatement pstmt = DB.prepareStatement(sql, null);
		pstmt.setInt(1, M_Warehouse_ID.intValue());
		ResultSet rs = pstmt.executeQuery();
		BigDecimal bd;
		if (rs.next())
		{
			//	Org
			Integer ii = new Integer(rs.getInt(1));
			int AD_Org_ID = Env.getContextAsInt(ctx, WindowNo, "AD_Org_ID");
			if (AD_Org_ID != ii.intValue())
				mTab.setValue("AD_Org_ID", ii);
			//	Locator
			ii = new Integer(rs.getInt(2));
			if (rs.wasNull())
				Env.setContext(ctx, WindowNo, 0, "M_Locator_ID", null);
			else
			{
				//log.config("M_Locator_ID=" + ii);
				Env.setContext(ctx, WindowNo, "M_Locator_ID", ii.intValue());
			}
		}
		rs.close();
		pstmt.close();
	}
	catch (SQLException e)
	{
		mTab.setResult(e.getLocalizedMessage());
	}
}

function updatepartner(Properties ctx, Integer WindowNo, GridTab mTab, GridField mField, Object value) {
	Integer C_BPartner_ID = (Integer)value;
	String sql = "SELECT p.AD_Language,p.C_PaymentTerm_ID,"
		+ " p.M_PriceList_ID,p.PaymentRule,p.POReference,"
		+ " p.SO_Description,p.IsDiscountPrinted,"
		+ " (p.SO_CreditLimit+p.SO_CreditOverLimit)-p.SO_CreditUsed AS CreditAvailable,"
		+ " l.C_BPartner_Location_ID,c.AD_User_ID "
		+ " FROM C_BPartner p LEFT OUTER JOIN C_BPartner_Location l ON p.C_BPartner_ID = l.C_BPartner_ID"
		+ " LEFT OUTER JOIN AD_User c ON p.C_BPartner_ID = c.C_BPartner_ID "
		+ " AND p.C_BPartner_ID=?";		//	1
	try
	{
		PreparedStatement pstmt = DB.prepareStatement(sql, null);
		pstmt.setInt(1, C_BPartner_ID.intValue());
		ResultSet rs = pstmt.executeQuery();
		BigDecimal bd;
		if (rs.next())
		{
			//	Location
			Integer ii = new Integer(rs.getInt("C_BPartner_Location_ID"));
			if (rs.wasNull())
				mTab.setValue("C_BPartner_Location_ID", null);
			else
				mTab.setValue("C_BPartner_Location_ID", ii);
			//	Contact
			ii = new Integer(rs.getInt("AD_User_ID"));
			if (rs.wasNull())
				mTab.setValue("AD_User_ID", null);
			else
				mTab.setValue("AD_User_ID", ii);
			//	CreditAvailable
			double CreditAvailable = rs.getDouble("CreditAvailable");
			if (!rs.wasNull() && CreditAvailable < 0)
				mTab.fireDataStatusEEvent("CreditLimitOver",
					DisplayType.getNumberFormat(DisplayType.Amount).format(CreditAvailable),
					false);
		}
		rs.close();
		pstmt.close();
	}
	catch (SQLException e)
	{
		mTab.setResult(e.getLocalizedMessage());
	}	
}

function updatedoctype(Properties ctx, Integer WindowNo, GridTab mTab, GridField mField, Object value) {
	Integer C_DocType_ID = (Integer)value;
	String sql = "SELECT d.DocBaseType, d.IsDocNoControlled, s.CurrentNext "
		+ "FROM C_DocType d LEFT OUTER JOIN AD_Sequence s ON d.DocNoSequence_ID = s.AD_Sequence_ID "
		+ "WHERE C_DocType_ID=?";		//	1
	try
	{
		Env.setContext(ctx, WindowNo, "C_DocTypeTarget_ID", C_DocType_ID.intValue());
		PreparedStatement pstmt = DB.prepareStatement(sql, null);
		pstmt.setInt(1, C_DocType_ID.intValue());
		ResultSet rs = pstmt.executeQuery();
		if (rs.next())
		{
			//	Set Movement Type
			String DocBaseType = rs.getString("DocBaseType");
			
			if (DocBaseType.equals(REF_C_DocTypeDocBaseType.MaterialDelivery)) {				//	Material Shipment					
				mTab.setValue("MovementType", REF_M_TransactionMovementType.CustomerShipment);
			} else if (DocBaseType.equals(REF_C_DocTypeDocBaseType.MaterialReceipt)) {				//	Material Receipts
				mTab.setValue("MovementType", REF_M_TransactionMovementType.VendorReceipts);
			} else if (DocBaseType.equals(REF_C_DocTypeDocBaseType.MaterialReturnOfCustomer)) {				//	Material Customer Return
					mTab.setValue("MovementType", REF_M_TransactionMovementType.CustomerReturns);
			} else if (DocBaseType.equals(REF_C_DocTypeDocBaseType.MaterialReturnOfVendor)) {				//	Material Vendor Return
					mTab.setValue("MovementType", REF_M_TransactionMovementType.VendorReturns);
			} else {
				// Aqui solo se puede llegar si se crea un nuevo tipo y no se ha definido un DocBaseTye en especial
				// Nunca deberia caer por aqui.
				boolean IsSOTrx = "Y".equals(Env.getContext(ctx, WindowNo, "IsSOTrx"));
				if (IsSOTrx)
					mTab.setValue("MovementType", REF_C_DocTypeDocBaseType.MaterialDelivery);	
				else	
					mTab.setValue("MovementType",REF_C_DocTypeDocBaseType.MaterialReceipt);
				
			}
			//	DocumentNo
			if (rs.getString("IsDocNoControlled").equals("Y"))
				mTab.setValue("DocumentNo", "<" + rs.getString("CurrentNext") + ">");
		}
		rs.close();
		pstmt.close();
	}
	catch (SQLException e)
	{
		mTab.setResult(e.getLocalizedMessage());
	}
}