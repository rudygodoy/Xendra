//created on: 08-mar-2018
//modified on : 09-abr-2018
//creted by: urpix
//inout.drl
package org.compiere.model
import org.xendra.Constants
import org.xendra.standard.rules.Policy
import org.compiere.model.MOrder
import org.compiere.model.MInvoice
import org.compiere.model.MInOut
import org.compiere.model.MPeriod
import org.compiere.model.MOrderLine
import org.compiere.model.MProduct
import org.compiere.model.MDocType
import org.compiere.model.MBPartner
import org.compiere.model.MConversionRate
import org.compiere.model.persistence.X_AD_Table
import org.compiere.process.DocAction
import org.compiere.model.reference.REF_C_OrderDeliveryRule
import org.compiere.model.reference.REF__DocumentStatus
import org.compiere.model.reference.REF_C_BPartnerSOCreditStatus
import org.compiere.model.reference.REF_C_DocTypeSubType
import org.compiere.model.reference.REF_C_DocTypeSubType
import org.compiere.model.reference.REF__DocumentAction
import org.compiere.util.Env
import org.compiere.util.Util
import java.math.BigDecimal
import java.util.Properties
global Properties ctx
dialect "mvel"
// inout prepare
rule "Period"
    agenda-group "prepare"   
    when
        eval(namerule("period"));
        $inout : MInOut()   
        eval(!isperiodopen($inout))       
    then
        $inout.setProcessMsg("@PeriodClosed@");
        $inout.setRulestatus(DocAction.STATUS_Invalid);
end

rule "lines"
    agenda-group "prepare"   
    dialect "mvel"
    when
         eval(namerule("lines"));
        $inout : MInOut($length : getLength() )
        eval($length == 0)       
    then
        $inout.setProcessMsg("@NoLines@");
        $inout.setRulestatus(DocAction.STATUS_Invalid);
end

rule "Credit"
    agenda-group "prepare"   
    when
        eval(namerule("credit"));       
        $inout : MInOut($length : getLength() )
        eval($length > 0)       
        eval(isperiodopen($inout))
        eval($inout.isSOTrx())
        eval(checkcredit($inout))
    then
        kcontext.getKnowledgeRuntime().getAgenda().getAgendaGroup( "prepareattributes" ).setFocus();       
end

rule "Purchase"
    agenda-group "prepare"   
    when
        eval(namerule("credit"));       
        $inout : MInOut($length : getLength() )
        eval($length > 0)       
        eval(isperiodopen($inout))
        eval(!$inout.isSOTrx())
    then
        kcontext.getKnowledgeRuntime().getAgenda().getAgendaGroup( "prepareattributes" ).setFocus();       
end

rule "attributes"
    agenda-group "prepareattributes"
    dialect "mvel"
    when
      eval(namerule("attributes"));
      $inout : MInOut()
      eval(checkattributes($inout))   
      eval($inout.setVolume())   
    then                
        kcontext.getKnowledgeRuntime().getAgenda().getAgendaGroup( "checkMaterialPolicy" ).setFocus();
end   

rule "stock"
    agenda-group "checkMaterialPolicy"
    dialect "mvel"
    when
      eval(namerule("stock"));
      $inout : MInOut()
      eval(!$inout.isReversal())
      eval($inout.checkMaterialPolicy())   
    then
        $inout.setRulestatus(DocAction.STATUS_InProgress);                
        kcontext.getKnowledgeRuntime().getAgenda().getAgendaGroup( "stock" ).setFocus();       
end   

rule "PickQAConfirm"
    agenda-group "stock"
    dialect "mvel"
    when
        eval(namerule("PickQAConfirm"));
        $inout : MInOut();
        eval(!$inout.isReversal())
        eval($inout.IsPickQAConfirm())
    then
        $inout.createPickQAConfirm();
end       

rule "ShipConfirm"
    agenda-group "stock"
    dialect "mvel"
    when
        eval(namerule("ShipConfirm"));
        $inout : MInOut();
        eval(!$inout.isReversal())
        eval($inout.IsShipConfirm())
    then
        $inout.createShipConfirm();
end       

//  minout complete

rule "prepare"
    agenda-group "complete"
    dialect "mvel"
    when
      eval(namerule("prepare"));
        $inout : MInOut()
        eval($inout.getC_Order_ID() == 0)
    then
      $inout.setRulestatus(DocAction.STATUS_Invalid);
end

rule "prepare2"
    agenda-group "complete"
    dialect "mvel"
    when
      eval(namerule("prepare"));
        $inout : MInOut()
        eval($inout.getC_Order_ID() > 0)
    then
      kcontext.getKnowledgeRuntime().getAgenda().getAgendaGroup( "confirmation" ).setFocus();
end

rule "confirmation"
    agenda-group "confirmation"
    dialect "mvel"
    when
      eval(namerule("confirmation"));
        $inout : MInOut()
        eval(!$inout.confirmsPending())
    then
      kcontext.getKnowledgeRuntime().getAgenda().getAgendaGroup( "approve" ).setFocus();
end

rule "approve"
    agenda-group "approve"
    dialect "mvel"
    when
      eval(namerule("approve"));
        $inout : MInOut()
        eval($inout.approveIt())
    then
      kcontext.getKnowledgeRuntime().getAgenda().getAgendaGroup( "pick" ).setFocus();
end


rule "complete"
    agenda-group "pick"
    dialect "mvel"
    when
      eval(namerule("complete"));
        $inout : MInOut()
        eval($inout.pick())
    then
      $inout.setRulestatus(DocAction.STATUS_Completed);
      //updatecostdoc($inout);
end

//function void updatecostdoc(MInOut inout)
//{   
//    MPeriod period = MPeriod.get(Env.getCtx(), inout.getMovementDate(), inout.getAD_Org_ID(), inout.getAD_Client_ID());
//    StockWorker sw = new StockWorker();
//    sw.setCommand(StockWorker.Document);
//    sw.addProperty(Constants.COLUMNNAME_AD_Client_ID, inout.getAD_Client_ID());
//    sw.addProperty(MPeriod.COLUMNNAME_C_Period_ID, period.ToEnd());
//    sw.addProperty(MInOut.COLUMNNAME_M_InOut_ID, inout.get_ID());
//    sw.addProperty(X_AD_Table.COLUMNNAME_AD_Table_ID, inout.Table_ID);
//    sw.addProperty(MOrder.COLUMNNAME_DocStatus, DocAction.STATUS_Completed);                           
//    sw.setMachine(Env.getServerMaterial());
//    sw.Pull();       
//}

function boolean checkcredit(MInOut inout)
{
    return Policy.getInstance().checkcredit(inout);
}

function boolean checkattributes(MInOut inout)
{
    return Policy.getInstance().checkattributes(inout);
}

function boolean namerule(String name) {
    System.out.println("namerule ->" + name);
    return true;
}

function boolean isperiodopen(MInOut inout) {
    MDocType dt = MDocType.get(Env.getCtx(), inout.getC_DocType_ID());
    return MPeriod.isOpen(inout.getCtx(), inout.getDateAcct(), dt.getDocBaseType(), inout.getAD_Org_ID(), inout.getAD_Client_ID());
}