<?xml version="1.0" encoding="UTF-8"?>
<kiebase agenda="prepare" category="" default="false" package="org.compiere.model" name="purchaseinvoicekb" sessionname="purchaseinvoiceks" queuename="" docbasetype="API" docsubtype="" ruletype="R" group="4b84bd44-8b2b-42ce-934e-51faa9b12e72" entrypoint="" EqualsBehavior="EQUALITY" queuelistenerclass="" EventProcessingMode="CLOUD" Identifier="e37e45b7-a0b4-419d-8a9f-93ba334c1f8d" synchronized="2018-04-05 16:05:43.0" type="kiebase">
  <doctype docbasetype="API" docsubtype="" />
  <rule name="src/main/resources/org.xendra.standard/purchaseinvoice.drl" type="rule" sessionname="purchaseinvoiceks" file="purchaseinvoice.drl" Identifier="260d75d5-6db1-463d-a014-6ed4c84ef329" synchronized="2018-04-05 16:05:43.0"><![CDATA[//created on: 1-abr-2016
//modified on : 09-abr-2018
//created by : xapiens
//invoice.drl
package org.compiere.model
import org.compiere.model.MOrder
import org.compiere.model.MInvoice
import org.compiere.model.MInOut
import org.compiere.model.MPeriod
import org.compiere.model.MOrderLine
import org.compiere.model.MProduct
import org.compiere.model.MDocType
import org.compiere.model.MBPartner
import org.compiere.model.MConversionRate
import org.compiere.process.DocAction
//import org.compiere.model.reference.REF_C_OrderDeliveryRule
//import org.compiere.model.reference.REF__DocumentStatus
import org.compiere.model.reference.REF_C_BPartnerSOCreditStatus
import org.compiere.model.reference.REF_C_DocTypeSubType
//import org.compiere.model.reference.REF_C_DocTypeSubType
import org.compiere.model.reference.REF__DocumentAction
import org.compiere.util.Env
import org.compiere.util.Util
import java.math.BigDecimal
import java.util.Properties
global Properties ctx
dialect "mvel"
// invoice prepare
rule "Period"
	agenda-group "prepare"	
    when
    	eval(namerule("period"));
        $invoice : MInvoice()	
        eval(!isperiodopen($invoice))        
    then
        $invoice.setProcessMsg("@PeriodClosed@");
        $invoice.setRulestatus(DocAction.STATUS_Invalid);
end

rule "lines"
    agenda-group "prepare"    
    dialect "mvel"
    when
    	 eval(namerule("lines"));
        $invoice : MInvoice($length : getLength() )
        eval($length == 0)        
    then
        $invoice.setProcessMsg("@NoLines@");
        $invoice.setRulestatus(DocAction.STATUS_Invalid);
end

//rule "isCashwithCashBook"
//    agenda-group "prepare"    
//    dialect "mvel"
//    when
//    	eval(namerule("isCashwithCashBook"));
//        $invoice : MInvoice()
//        eval($invoice.IsPaymentCash())
//        eval($invoice.IsCashBookAssigned())        
//    then
//        $invoice.setProcessMsg("@NoCashBook@");
//        $invoice.setRulestatus(DocAction.STATUS_Invalid);
//end

rule "NotDocTypeValid"
	agenda-group "prepare"
	dialect "mvel"
	when
	  eval(namerule("DocTypeValid"));
		$invoice : MInvoice()
		eval(!isdoctypevalid($invoice))
	then	
		$invoice.setRulestatus(DocAction.STATUS_Invalid);
		$invoice.setProcessMsg("No Document Type");
end

rule "DocTypeValid"
	agenda-group "prepare"
	dialect "mvel"
	when
	  eval(namerule("DocTypeValid"));
		$invoice : MInvoice()
		eval(isdoctypevalid($invoice))
	then	
		$invoice.explodeBOM();
		kcontext.getKnowledgeRuntime().getAgenda().getAgendaGroup( "tax" ).setFocus();
end

rule "tax"
	agenda-group "tax"
	dialect "mvel"
	when
	  eval(namerule("tax"));
		$invoice : MInvoice()
		eval(calculateTaxTotal($invoice))
	then
		kcontext.getKnowledgeRuntime().getAgenda().getAgendaGroup( "credit" ).setFocus();
end

rule "Credit"
	agenda-group "credit"	
    when
    	eval(namerule("credit"));    	
        $invoice : MInvoice()                       
        eval(checkcredit($invoice))
    then
	    $invoice.setRulestatus(DocAction.STATUS_InProgress);
	    //  kcontext.getKnowledgeRuntime().getAgenda().getAgendaGroup( "payschedule" ).setFocus();        
end

rule "payschedule"
	agenda-group "payschedule"
	dialect "mvel"
	when
	  eval(namerule("payschedule"));
	  $invoice : MInvoice()
	  eval($invoice.createPaySchedule())			  
	then			 	
		$invoice.setRulestatus(DocAction.STATUS_InProgress);
end	

// invoice complete

rule freetransfer
	agenda-group "complete"
	dialect "mvel"
	when
		eval(namerule("freetransfer"));
		$invoice : MInvoice()
		eval($invoice.IsFreeTransfer())
	then
		$invoice.setRulestatus(DocAction.STATUS_Completed);
end

//rule cashfail
//    agenda-group "complete"    
//    dialect "mvel"
//    when
//    	eval(namerule("cash"));
//        $invoice : MInvoice()
//        eval($invoice.IsPaymentCash())
//        eval(!$invoice.IsCashBookAssigned())        
//    then
//        $invoice.setProcessMsg("@NoCashBook@");
//        $invoice.setRulestatus(DocAction.STATUS_Invalid);
//end

//rule cash
//    agenda-group "complete"    
//    dialect "mvel"
//    when
//    	eval(namerule("cash"));
//        $invoice : MInvoice()
//        eval($invoice.IsPaymentCash())
//        eval($invoice.IsCashBookAssigned())        
//    then
//   	kcontext.getKnowledgeRuntime().getAgenda().getAgendaGroup( "update" ).setFocus(); 
//end

//rule nocash
//    agenda-group "complete"    
//    dialect "mvel"
//    when
//    	eval(namerule("cash"));
//        $invoice : MInvoice()
//        eval(!$invoice.IsPaymentCash())               
//    then
//   	kcontext.getKnowledgeRuntime().getAgenda().getAgendaGroup( "update" ).setFocus(); 
//end

rule update
    agenda-group "complete"    
    dialect "mvel"
    when
    	eval(namerule("update"));
        $invoice : MInvoice()
        eval($invoice.UpdateInOut())               
        eval($invoice.UpdateOrder())
        eval($invoice.UpdateBPStats())
        eval($invoice.UpdateUser())
        eval($invoice.UpdateProject())
    then
   	$invoice.setRulestatus(DocAction.STATUS_Completed); 
end

function boolean namerule(String name) {
	System.out.println("namerule ->" + name);
	return true;
}

function boolean isperiodopen(MInvoice invoice) {
	MDocType dt = MDocType.get(Env.getCtx(), invoice.getC_DocTypeTarget_ID());
	return MPeriod.isOpen(invoice.getCtx(), invoice.getDateAcct(), dt.getDocBaseType(), invoice.getAD_Org_ID(), invoice.getAD_Client_ID());
}

function boolean isdoctypevalid(MInvoice invoice) {
	boolean ret = true;
	if (invoice.getC_DocType_ID() != invoice.getC_DocTypeTarget_ID())			
		invoice.setC_DocType_ID(invoice.getC_DocTypeTarget_ID());
	if (invoice.getC_DocType_ID() == 0)
	{							
		ret = false;
	}
	return ret;
}

function boolean checkcredit(MInvoice invoice) {
	boolean ret = true;
	if (invoice.isSOTrx() && !invoice.isReversal())
	{
		MBPartner bp = new MBPartner (invoice.getCtx(), invoice.getC_BPartner_ID(), invoice.get_TrxName());
		if (REF_C_BPartnerSOCreditStatus.CreditStop.equals(bp.getSOCreditStatus()))
		{
			invoice.setProcessMsg("@BPartnerCreditStop@ - @TotalOpenBalance@=" 
				+ bp.getTotalOpenBalance()
				+ ", @SO_CreditLimit@=" + bp.getSO_CreditLimit());
			invoice.setRulestatus(DocAction.STATUS_Invalid);
			ret = false;
		}
		if (REF_C_BPartnerSOCreditStatus.CreditHold.equals(bp.getSOCreditStatus()))
		{
			invoice.setProcessMsg("@BPartnerCreditHold@ - @TotalOpenBalance@=" 
				+ bp.getTotalOpenBalance() 
				+ ", @SO_CreditLimit@=" + bp.getSO_CreditLimit());
			invoice.setRulestatus(DocAction.STATUS_Invalid);
			ret = false;
		}
	}
	return ret;
}

function boolean calculateTaxTotal(MInvoice invoice) {
	boolean ret = true;
	if (!invoice.calculateTaxTotal())
	{
		invoice.setRulestatus(DocAction.STATUS_Invalid);
		ret = false;		
	}
	return ret;
}]]></rule>
</kiebase>


