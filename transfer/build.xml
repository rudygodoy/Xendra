<?xml version="1.0" encoding="UTF-8"?>

<!-- ============================================= -->
<!-- Point of Sale                                 -->
<!-- ============================================= -->
<!-- $Header: /svn/Xendra/client/build.xml,v 1.2 2011/11/11 21:57:27 xapiens Exp $ -->

<project name="transfer" default="clientDistribute" basedir=".">

  <description>
    This buildfile is used to build the transfer plugin subproject within the Xendra project.
  </description>

  <!-- set global properties for this build -->
  <property name="src" value="src"/>
  <property name="build.dir" value="build"/>
  <property name="dist.dir" value="../lib"/>
  <property name="plugin_id" value="org.xendra.transfer"/>
  <property name="jar.path" value="../lib"/>
  <property name="jar.name" value="transfer"/>
  <property name="rule.in.dir" value="./src/org/xendra/drools"/>
  <property name="rule.out.dir" value="./src/org/xendra/rules"/>
  <property name="process.in.dir" value="./src/org/xendra/process"/>
  <property name="process.out" value="./src/org/xendra/process"/>
  <property name="message.in.dir" value="./src/org/xendra/hornetq"/>
  <property name="message.out.dir" value="./src/org/xendra/messages"/>
  <!--<property environment="env"/>-->
  <import file="../utils_dev/properties.xml"/>

  <!-- set path to include the necessary jar files for javac -->
  <path id="project.class.path">
    <pathelement path="${classpath}"/>    
    <pathelement path="${jar.path}/CCTools.jar"/>
    <pathelement path="${jar.path}/common.jar"/>
    <pathelement path="${jar.path}/Columba.jar"/>
    <pathelement path="${jar.path}/postgresql.jar"/>
    <pathelement path="${jar.path}/core.jar"/>
    <pathelement path="${jar.path}/dev.jar"/>
    <pathelement path="${jar.path}/client.jar"/>
    <pathelement path="${jar.path}/core.jar"/>
    <pathelement path="${jar.path}/xendrian.jar"/>
    <pathelement path="${jar.path}/holon.jar"/>	
    <pathelement path="${jar.path}/Drools.jar"/>
    <pathelement path="../tools/lib/flexdock-1.2.3.jar"/>
    <pathelement path="../tools/lib/frapuccino-1.0pre1.jar"/>
    <pathelement path="../native/win32/lib/jdic.jar"/>
    <pathelement path="../native/win32/lib/jniwrap-2.4.jar"/>
    <pathelement path="../tools/lib/jhall-2.0_02.jar"/>
    <pathelement path="../tools/lib/swingx.jar"/>
    <pathelement path="../tools/lib/swingx-1.6.jar"/>
    <pathelement path="../tools/lib/jdom-1.0.jar"/>
    <pathelement path="../tools/lib/commons-cli-1.0.jar"/>
    <pathelement path="../tools/lib/forms-1.3.0.jar"/>	
    <pathelement path="../tools/lib/macchiato-1.0pre1.jar"/>
  </path>
  
  <target name="clientInit" description="initialization target">
    <echo message="=========== Build pos"/>
    <!-- create the time stamp -->
    <tstamp> 
	<format property="timestamp" pattern="yyyy-MM-dd HH:mm:ss" />	 
    </tstamp>	
    <!-- create the build directory structure used by compile -->
    <mkdir dir="${build.dir}"/>
    <mkdir dir="${plugin_id}"/>
    <!-- check for the distribution directory -->
    <available file="${dist.dir}" type="dir" property="dist.dir.exists"/>
    <uptodate property="jar.uptodate"
		targetfile="${dist.dir}/${jar.name}.jar">
      <srcfiles dir="${src}" includes="**/*.java"/>
      <!--<srcfiles dir="..\base" includes="Base.jar"/>-->
    </uptodate>
  </target>
	
  <target name="clientMakedir" depends="clientInit" unless="dist.dir.exists">
    <!-- create the distribution directory if not available -->
    <mkdir dir="${dist.dir}"/>
  </target>
  

  <!-- =========================================== -->
  <!-- Compile                                     -->
  <!-- =========================================== -->
  <target name="clientCompile" depends="clientMakedir">
    <java fork="true" classname="org.compiere.util.GenerateMessage">
	<arg value="${message.in.dir}"/>
	<arg value="${message.out.dir}"/>
	<classpath refid="project.class.path"/>
    </java>	    
    <java fork="true" classname="org.xendra.developer.GenerateRule" >
      <arg value="${rule.in.dir}"/>
      <arg value="${rule.out.dir}"/>
      <classpath refid="project.class.path"/>
    </java>      
    <!--<java fork="true" classname="org.compiere.util.GenerateProcess" >
      <arg value="${process.in.dir}"/>
      <arg value="${process.out}"/>
      <classpath refid="project.class.path"/>
    </java>-->
    <!-- compile the java code from ${src} into ${build.dir} -->
    <javac srcdir="${src}" destdir="${build.dir}" deprecation="off" debug="on">
      <classpath refid="project.class.path"/>
    </javac>
    <!-- copy all image & sound files from src to the build directory -->
    <copy todir="${build.dir}">
      <fileset dir="${src}">
        <include name="**/images/*"/>
        <include name="**/*.gif"/>
        <include name="**/*.jpg"/>
        <include name="**/*.png"/>
        <include name="**/*.wav"/>
        <include name="**/*.htm"/>
	<include name="**/*.txt"/>
        <include name="**/*.xml"/>
        <include name="**/*.html"/>
        <include name="**/*.properties"/>
        <exclude name="**/package.html"/>      	
      </fileset>
    </copy>
  </target>


  <!-- =========================================== -->
  <!-- Distribution                                -->
  <!-- =========================================== -->
  <target name="clientDistribute" depends="clientCompile" unless="jar.uptodate">
      <jar jarfile="${plugin_id}/${jar.name}.jar" basedir="${build.dir}" duplicate="preserve" index="yes">
      <manifest>
        <attribute name="Specification-Title" value="Xendra"/>
        <attribute name="Specification-Version" value="${env.XENDRA_VERSION}"/>
        <attribute name="Specification-Vendor" value="Xendra"/>
        <attribute name="Implementation-Title" value="Xendra ${env.XENDRA_VERSION}"/>
        <attribute name="Implementation-Version" value="${env.XENDRA_VERSION} ${DSTAMP}-${TSTAMP}"/>
        <attribute name="Implementation-Vendor" value="${env.XENDRA_VENDOR}"/> 
        <attribute name="Implementation-URL" value="http://www.xendra.org"/>
      </manifest> 
    </jar>
    <copy file="src/org/xendra/transfer/plugin/plugin.xml" todir="."/>
    <replace file="./plugin.xml">
	<replacefilter token="@timestamp@" value="${timestamp}"/>
    </replace>
    <zip destfile="${dist.dir}/${jar.name}.zip">	
	<zipfileset dir="${plugin_id}" prefix="${plugin_id}">
		<include name="${jar.name}.jar"/>
	</zipfileset>
	<!--<zipfileset dir="src/org/xendra/pos/plugin" includes="plugin.xml" prefix="${plugin_id}"/>-->
	<zipfileset dir="." includes="plugin.xml" prefix="${plugin_id}"/>
	<zipfileset dir="resource" prefix="${plugin_id}/resource" />
	<zipfileset dir="src/org/xendra/messages" prefix="${plugin_id}/messageformat"/>
	<zipfileset dir="src/org/xendra/rules" includes="*.xml" prefix="${plugin_id}/rules"/>
	<zipfileset dir="printdocumentformat" prefix="${plugin_id}/printdocumentformat" />
	<zipfileset dir="src/org/xendra/process" includes="*.xml" prefix="${plugin_id}/process"/>
	<zipfileset dir="fill" prefix="${plugin_id}/fill" />
    </zip>
    <delete file="./plugin.xml"/>	
  </target>


  <target name="clean">
    <!-- Delete the ${build.dir} directory trees -->
    <delete dir="${build.dir}"/>
    <delete file="${dist.dir}/${jar.name}.zip" failonerror="false"/>
  </target>

</project>
